<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux权限管理</title>
    <url>/suxichuan/hudiBlog/2024/10/19/Linux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="Linux权限管理"><a href="#Linux权限管理" class="headerlink" title="Linux权限管理"></a>Linux权限管理</h3><h4 id="一、ACL权限"><a href="#一、ACL权限" class="headerlink" title="一、ACL权限"></a>一、ACL权限</h4><h5 id="1、ACL概述"><a href="#1、ACL概述" class="headerlink" title="1、ACL概述"></a>1、ACL概述</h5><p>ACL用于解决用户对文件身份不足的问题</p>
<h5 id="2、开启ACL"><a href="#2、开启ACL" class="headerlink" title="2、开启ACL"></a><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\AppData\Roaming\Typora\typora-user-images\image-20230726112244476.png"
                      alt="image-20230726112244476"
                ><figcaption>image-20230726112244476</figcaption></figure>2、开启ACL</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-202792 ~]# dumpe2fs -h /dev/vda  #dumpe2fs -h /dev/vda 查询指定的分区详细文件系统信息的命令</span><br><span class="line">vda   vda1  </span><br><span class="line">[root@hecs-202792 ~]# dumpe2fs -h /dev/vda1</span><br><span class="line">dumpe2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem volume name:   &lt;none&gt;</span><br><span class="line">Last mounted on:          /</span><br><span class="line">Filesystem UUID:          3390e3f0-f894-4ed3-870b-7049a0e8d496</span><br><span class="line">Filesystem magic number:  0xEF53</span><br><span class="line">Filesystem revision #:    1 (dynamic)</span><br><span class="line">Filesystem features:      has_journal ext_attr resize_inode dir_index filetype needs_recovery extent 64bit flex_bg sparse_super large_file huge_file uninit_bg dir_nlink extra_isize</span><br><span class="line">Filesystem flags:         signed_directory_hash </span><br><span class="line">Default mount options:    user_xattr acl  #开启了ACL</span><br><span class="line">Filesystem state:         clean</span><br><span class="line">Errors behavior:          Continue</span><br><span class="line">Filesystem OS type:       Linux</span><br><span class="line">Inode count:              2621440</span><br><span class="line">Block count:              10485504</span><br><span class="line">Reserved block count:     524275</span><br><span class="line">Free blocks:              9679241</span><br><span class="line">Free inodes:              2551411</span><br><span class="line">First block:              0</span><br><span class="line">Block size:               4096</span><br><span class="line">Fragment size:            4096</span><br><span class="line">Group descriptor size:    64</span><br><span class="line">Reserved GDT blocks:      1024</span><br><span class="line">Blocks per group:         32768</span><br><span class="line">Fragments per group:      32768</span><br><span class="line">Inodes per group:         8192</span><br><span class="line">Inode blocks per group:   512</span><br><span class="line">Flex block group size:    16</span><br><span class="line">Filesystem created:       Thu Feb 10 17:49:24 2022</span><br><span class="line">Last mount time:          Fri Jun  2 11:07:58 2023</span><br><span class="line">Last write time:          Fri Jun  2 11:07:53 2023</span><br><span class="line">Mount count:              5</span><br><span class="line">Maximum mount count:      -1</span><br><span class="line">Last checked:             Thu Feb 10 17:49:24 2022</span><br><span class="line">Check interval:           0 (&lt;none&gt;)</span><br><span class="line">Lifetime writes:          6784 MB</span><br><span class="line">Reserved blocks uid:      0 (user root)</span><br><span class="line">Reserved blocks gid:      0 (group root)</span><br><span class="line">First inode:              11</span><br><span class="line">Inode size:	          256</span><br><span class="line">Required extra isize:     28</span><br><span class="line">Desired extra isize:      28</span><br><span class="line">Journal inode:            8</span><br><span class="line">First orphan inode:       2232545</span><br><span class="line">Default directory hash:   half_md4</span><br><span class="line">Directory Hash Seed:      ca62a418-0c1f-4c29-a8b4-b03238797475</span><br><span class="line">Journal backup:           inode blocks</span><br><span class="line">Journal features:         journal_incompat_revoke journal_64bit</span><br><span class="line">Journal size:             128M</span><br><span class="line">Journal length:           32768</span><br><span class="line">Journal sequence:         0x000a79a9</span><br><span class="line">Journal start:            15588</span><br></pre></td></tr></table></figure></div>

<p>如果没有开启，手动开启分区的ACL权限</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mount -o remount,acl / #重新挂载根目录，并加入ACL权限</span><br></pre></td></tr></table></figure></div>

<p>也可以通过修改&#x2F;etc&#x2F;fstab 文件，永久开启 ACL 权限</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/fstab</span><br><span class="line">UUID=3390e3f0-f894-4ed3-870b-7049a0e8d496 /                       ext4    defaults,acl        1 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">加入ACL</span></span><br><span class="line">mount -o remount /</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新挂载文件系统或重启系统，是修改生效</span></span><br></pre></td></tr></table></figure></div>

<h5 id="3、ACL基本命令"><a href="#3、ACL基本命令" class="headerlink" title="3、ACL基本命令"></a>3、ACL基本命令</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">getfacl 文件名 查询文件的ACL权限</span><br><span class="line">setfacl 文件名 设定文件的ACL权限</span><br><span class="line">-m 设定ACL权限</span><br><span class="line">-b 删除ACL权限</span><br><span class="line">-x:用户 删除单个用户的ACL权限</span><br><span class="line">setfacl -m u:用户名:权限 文件名</span><br><span class="line">setfacl -m g:组名：权限 文件名</span><br><span class="line">setfacl -m u:aa:rwx /test 给 test 目录赋予 aa 是读写执行的 ACL 权限</span><br><span class="line">setfacl -m u:cc:rx -R soft/ 赋予递归 ACL 权限，只能赋予目录 -R 递归</span><br><span class="line">setfacl -m d:u:aa:rwx -R /test ACL 默认权限。 注意：默认权限只能赋予目录</span><br><span class="line"></span><br><span class="line">[root@hecs-202792 test]# setfacl -m d:u:suxichuan2:rwx a.txt </span><br><span class="line">setfacl: a.txt: Only directories can have default ACLs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果给目录赋予 acl 权限，两条命令都要输入</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">递归与默认的区别：</span></span><br><span class="line">setfacl -m u:cc:rx -R soft/ 只对已经存在的文件生效</span><br><span class="line">setfacl -m d:u:aa:rwx -R /test 只对以后新建的文件生效</span><br></pre></td></tr></table></figure></div>

<h5 id="4、最大有效权限mask"><a href="#4、最大有效权限mask" class="headerlink" title="4、最大有效权限mask"></a>4、最大有效权限mask</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">setfacl -m m:rx /test3</span><br><span class="line">设定 mask 权限为 r-x。使用“m:权限”格式</span><br><span class="line">[root@hecs-202792 /]# getfacl test3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">file: test3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">owner: root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::r-x</span><br><span class="line">other::r-x</span><br></pre></td></tr></table></figure></div>

<h5 id="5、删除ACL权限"><a href="#5、删除ACL权限" class="headerlink" title="5、删除ACL权限"></a>5、删除ACL权限</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除所有的ACL权限</span></span><br><span class="line">[root@hecs-202792 /]# getfacl test3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">file: test3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">owner: root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::r-x</span><br><span class="line">other::r-x</span><br><span class="line">[root@hecs-202792 /]# setfacl -b test3  删除文件的所有ACL权限</span><br><span class="line">[root@hecs-202792 /]# getfacl test3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">file: test3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">owner: root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">group::r-x</span><br><span class="line">other::r-x</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除指定的用户ACL权限</span></span><br><span class="line">[root@hecs-202792 /]# setfacl -m u:suxichuan2:rwx /test3</span><br><span class="line">[root@hecs-202792 /]# setfacl -m u:suxichuan1:rwx /test3</span><br><span class="line">[root@hecs-202792 /]# setfacl -m u:suhe:rwx /test3</span><br><span class="line">[root@hecs-202792 /]# getfacl /test3</span><br><span class="line">getfacl: Removing leading &#x27;/&#x27; from absolute path names</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">file: test3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">owner: root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">user:suhe:rwx</span><br><span class="line">user:suxichuan1:rwx</span><br><span class="line">user:suxichuan2:rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br><span class="line">[root@hecs-202792 /]# setfacl -x u:suxichuan2 /test3</span><br><span class="line">[root@hecs-202792 /]# getfacl /test3</span><br><span class="line">getfacl: Removing leading &#x27;/&#x27; from absolute path names</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">file: test3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">owner: root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">user:suhe:rwx</span><br><span class="line">user:suxichuan1:rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br></pre></td></tr></table></figure></div>

<h4 id="二、sudo授权"><a href="#二、sudo授权" class="headerlink" title="二、sudo授权"></a>二、sudo授权</h4><ul>
<li><p>sudo给普通用户赋予部分管理员权限</p>
</li>
<li><p>&#x2F;sbin 在此目录下命令只有超级用户才能使用</p>
</li>
</ul>
<h5 id="root身份"><a href="#root身份" class="headerlink" title="root身份"></a>root身份</h5><p>visudo 赋予普通用户权限命令，命令执行后和 vi 一样使用</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Allow root to run any commands anywhere</span></span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户名 被管理主机的地址=(可使用的身份) 授权命令(绝对路径)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Allows members of the &#x27;sys&#x27; group to run networking, software,</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># service management apps and more.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">%sys ALL = NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Allows people in group wheel to run all commands</span></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">wheel  ALL=(ALL)       ALL</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">%组名 被管理主机的地址=(可使用的身份) 授权命令(绝对路径)</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>用户名&#x2F;组名：代表 root 给哪个用户或用户组赋予命令，注意组名前加“%”</li>
<li>用户可以用指定的命令管理指定 IP 地址的服务器。如果写 ALL，代表可以管理任何主机，如果写固定 IP，代表用户可以管理指定的服务器。</li>
<li>可使用身份：就是把来源用户切换成什么身份使用，（ALL）代表可以切换成任意身份。这个字段可以省略</li>
<li>授权命令：代表 root 把什么命令授权给普通用户。默认是 ALL，代表任何命令，这个当然不行。如果需要给那个命令授权，写入命令名即可，不过需要注意一定要命令写成绝对路径</li>
</ul>
<h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -l #查看可用的授权</span><br><span class="line">[suxichuan2@hecs-202792 /]$ sudo -l</span><br><span class="line"></span><br><span class="line">We trust you have received the usual lecture from the local System</span><br><span class="line">Administrator. It usually boils down to these three things:</span><br><span class="line"></span><br><span class="line">    #1) Respect the privacy of others.</span><br><span class="line">    #2) Think before you type.</span><br><span class="line">    #3) With great power comes great responsibility.</span><br><span class="line"></span><br><span class="line">[sudo] password for suxichuan2: </span><br><span class="line">Matching Defaults entries for suxichuan2 on hecs-202792:</span><br><span class="line">    !visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin, env_reset, env_keep=&quot;COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS&quot;, env_keep+=&quot;MAIL</span><br><span class="line">    PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&quot;, env_keep+=&quot;LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&quot;, env_keep+=&quot;LC_MONETARY LC_NAME LC_NUMERIC</span><br><span class="line">    LC_PAPER LC_TELEPHONE&quot;, env_keep+=&quot;LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&quot;, secure_path=/sbin\:/bin\:/usr/sbin\:/usr/bin</span><br><span class="line"></span><br><span class="line">User suxichuan2 may run the following commands on hecs-202792:</span><br><span class="line">    (root) /sbin/shutdown –r now</span><br></pre></td></tr></table></figure></div>

<p>授权 aa 用户可以添加其他普通用户</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">aa ALL=/usr/sbin/useradd 赋予 aa 添加用户权限.命令必须写入绝对路径</span><br><span class="line">aa ALL=/usr/bin/passwd 赋予改密码权限，取消对 root 的密码修改</span><br></pre></td></tr></table></figure></div>

<h4 id="三、文件特殊权限"><a href="#三、文件特殊权限" class="headerlink" title="三、文件特殊权限"></a>三、文件特殊权限</h4><p>SetUID、SetGID、Sticky BIT</p>
<h5 id="1、SetUID"><a href="#1、SetUID" class="headerlink" title="1、SetUID"></a>1、SetUID</h5><ul>
<li>只有可以执行的二进制程序才能设定 SUID 权限</li>
<li>命令执行者要对该程序拥有 x（执行）权限</li>
<li>命令执行者在执行该程序时获得该程序文件属主的身份（在执行程序的过程中灵魂附体为文件的属主）</li>
<li>SetUID 权限只在该程序执行过程中有效，也就是说身份改变只在程序执行过程中有效</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[suxichuan2@hecs-202792 /]$ ll /etc/passwd</span><br><span class="line">-rw-r--r--. 1 root root 1469 Jul 26 11:43 /etc/passwd</span><br><span class="line">[suxichuan2@hecs-202792 /]$ ll /etc/shadow</span><br><span class="line">----------. 1 root root 1289 Jul 26 11:43 /etc/shadow</span><br><span class="line">[suxichuan2@hecs-202792 /]$ ll /usr/bin/passwd</span><br><span class="line">-rwsr-xr-x. 1 root root 27856 Apr  1  2020 /usr/bin/passwd</span><br></pre></td></tr></table></figure></div>

<p>&#x2F;usr&#x2F;bin&#x2F;passwd 命令拥有特殊权限 SetUID ，也就是在属主的权限位的执行权限上是 s。可以这样来理解它：当一个具有执行权限的文件设置 SetUID 权限后，用户执行这个文件时将以文件所有者的身份执行。&#x2F;usr&#x2F;bin&#x2F;passwd 命令具有 SetUID 权限，所有者为 root（Linux 中的命令默认所有者都是 root），也就是说当普通用户使用 passwd 更改自己密码的时候，那一瞬间突然灵魂附体了，实际是在用 passwd命令所有者 root 的身份在执行 passwd 命令，root 当然可以将密码写入&#x2F;etc&#x2F;shadow 文件（不要忘记 root这个家伙是 superman 什么事都可以干），所以普通用户也可以修改&#x2F;etc&#x2F;shadow 文件，命令执行完成后该身份也随之消失。</p>
<blockquote>
<p>如果取消 SetUID 权限，则普通用户就不能修改自己的密码了</p>
</blockquote>
<p>危险的 SetUID</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-202792 /]# chmod u+s usr/bin/vim</span><br><span class="line">[root@hecs-202792 /]# ll /usr/bin/vim</span><br><span class="line">-rwsr-xr-x. 1 root root 2337208 Dec 16  2020 /usr/bin/vim</span><br></pre></td></tr></table></figure></div>

<p>ps:</p>
<ul>
<li>关键目录应严格控制写权限。比如“&#x2F;”、“&#x2F;usr”等；</li>
<li>用户的密码设置要严格遵守密码三原则；</li>
<li>对系统中默认应该具有 SetUID 权限的文件作一列表，定时检查有没有这之外的文件被设置了 SetUID 权限。</li>
</ul>
<h5 id="2-、SetGID"><a href="#2-、SetGID" class="headerlink" title="2 、SetGID"></a>2 、SetGID</h5><p>针对文件的作用<br>SGID 即可以针对文件生效，也可以针对目录生效，这和 SUID 明显不同。如果针对文件，SGID 的<br>含义如下：</p>
<ul>
<li>只有可执行的二进制程序才能设置 SGID 权限</li>
<li>命令执行者要对该程序拥有 x（执行）权限</li>
<li>命令执行在执行程序的时候，组身份升级为该程序文件的属组</li>
<li>SetGID 权限同样只在该程序执行过程中有效，也就是说组身份改变只在程序执行过程中有效</li>
</ul>
<h5 id="3-、-文件特殊权限之-Sticky-BIT"><a href="#3-、-文件特殊权限之-Sticky-BIT" class="headerlink" title="3 、 文件特殊权限之 Sticky BIT"></a>3 、 文件特殊权限之 Sticky BIT</h5><ul>
<li>粘着位目前只对目录有效</li>
<li>普通用户对该目录拥有 w 和 x 权限，即普通用户可以在此目录拥有写入权限</li>
<li>如果没有粘着位，因为普通用户拥有 w 权限，所以可以删除此目录下所有文件，包括其他用户建立的文件。一但赋予了粘着位，除了 root 可以删除所有文件，普通用户就算拥有 w 权限，也只能删除自己建立的文件，但是不能删除其他用户建立的文件。</li>
</ul>
<h5 id="4、设定文件特殊权限"><a href="#4、设定文件特殊权限" class="headerlink" title="4、设定文件特殊权限"></a>4、设定文件特殊权限</h5><p>特殊权限这样来表示：4 代表 SUID、2 代表 SGID、1 代表 SBIT</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-202792 /]# mkdir a1</span><br><span class="line">[root@hecs-202792 /]# chmod 4775 a1</span><br><span class="line">[root@hecs-202792 /]# mkdir a2 a3</span><br><span class="line">[root@hecs-202792 /]# chmod 2775 a2</span><br><span class="line">[root@hecs-202792 /]# chmod 1775 a3</span><br><span class="line"></span><br><span class="line">[root@hecs-202792 /]# ll -h | grep a</span><br><span class="line">total 264K</span><br><span class="line">drwsrwxr-x.   2 root   root   4.0K Jul 26 14:36 a1</span><br><span class="line">drwxrwsr-x.   2 root   root   4.0K Jul 26 14:36 a2</span><br><span class="line">drwxrwxr-t.   2 root   root   4.0K Jul 26 14:36 a3</span><br></pre></td></tr></table></figure></div>

<h4 id="四、文件系统属性-chattr-权限"><a href="#四、文件系统属性-chattr-权限" class="headerlink" title="四、文件系统属性 chattr 权限"></a>四、文件系统属性 chattr 权限</h4><h5 id="1、命令格式"><a href="#1、命令格式" class="headerlink" title="1、命令格式"></a>1、命令格式</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# chattr [+-=] [选项] 文件或目录名</span><br><span class="line">选项：</span><br><span class="line">+: 增加权限</span><br><span class="line">-: 删除权限</span><br><span class="line">=: 等于某权限</span><br><span class="line">i: 如果对文件设置 i 属性，那么不允许对文件进行删除、改名，也不能添加和修改数据；如果对目录设置 i 属性，那么只能修改目录下文件的数据，但不允许建立和删除文件。</span><br><span class="line">a: 如果对文件设置 a 属性，那么只能在文件中增加数据，但是不能删除也不能修改数据；如果对目录设置 a 属性，那么只允许在目录中建立和修改文件，但是不允许删除</span><br><span class="line">e: Linux 中绝大多数的文件都默认拥有 e 属性。表示该文件是使用 ext 文件系统进行存储的，而且不能使用“chattr -e”命令取消 e 属性。</span><br></pre></td></tr></table></figure></div>

<h5 id="2、查看文件系统属性-lsattr"><a href="#2、查看文件系统属性-lsattr" class="headerlink" title="2、查看文件系统属性 lsattr"></a>2、查看文件系统属性 lsattr</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# lsattr 选项 文件名</span><br><span class="line">选项：</span><br><span class="line">-a 显示所有文件和目录</span><br><span class="line">-d 若目标是目录，仅列出目录本身的属性，而不是子文件的</span><br></pre></td></tr></table></figure></div>

<h5 id="3、例子"><a href="#3、例子" class="headerlink" title="3、例子"></a>3、例子</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-202792 /]# chattr +i a.txt</span><br><span class="line">[root@hecs-202792 /]# rm -rf a.txt </span><br><span class="line">rm: cannot remove ‘a.txt’: Operation not permitted</span><br><span class="line">[root@hecs-202792 /]# mv a.txt b.txt</span><br><span class="line">mv: cannot move ‘a.txt’ to ‘b.txt’: Operation not permitted</span><br><span class="line"></span><br><span class="line">[root@hecs-202792 /]# chattr +i attr</span><br><span class="line">[root@hecs-202792 /]# cd attr/</span><br><span class="line">[root@hecs-202792 attr]# ls</span><br><span class="line">[root@hecs-202792 attr]# touch a.txt</span><br><span class="line">touch: cannot touch ‘a.txt’: Permission denied</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux操作系统Nginx</title>
    <url>/suxichuan/hudiBlog/2024/10/19/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FNginx/</url>
    <content><![CDATA[<h4 id="Linux操作系统Nginx"><a href="#Linux操作系统Nginx" class="headerlink" title="Linux操作系统Nginx"></a>Linux操作系统Nginx</h4><h5 id="1、安装相关的依赖软件"><a href="#1、安装相关的依赖软件" class="headerlink" title="1、安装相关的依赖软件"></a>1、安装相关的依赖软件</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum install openssl-devel pcre-devel gcc -y</span><br></pre></td></tr></table></figure></div>

<h5 id="2、检验依赖软件"><a href="#2、检验依赖软件" class="headerlink" title="2、检验依赖软件"></a>2、检验依赖软件</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -q openssl-devel pcre-devel gcc</span><br></pre></td></tr></table></figure></div>

<h5 id="3、创建目录"><a href="#3、创建目录" class="headerlink" title="3、创建目录"></a>3、创建目录</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /data</span><br><span class="line">mkdir /data/server /data/soft</span><br></pre></td></tr></table></figure></div>

<h5 id="4、创建用户"><a href="#4、创建用户" class="headerlink" title="4、创建用户"></a>4、创建用户</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">useradd www -s /sbin/nologin -M</span><br></pre></td></tr></table></figure></div>

<h5 id="5、上传源码包并解压"><a href="#5、上传源码包并解压" class="headerlink" title="5、上传源码包并解压"></a>5、上传源码包并解压</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用rz工具上传源码包nginx-1.8.1.tar.gz</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装rz工具</span></span><br><span class="line">yum install -y lrzsz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或执行</span></span><br><span class="line">rpm -qa lrzsz</span><br><span class="line"></span><br><span class="line">[root@hecs-202792 ~]# rpm -qa lrzsz</span><br><span class="line">lrzsz-0.12.20-36.el7.x86_64</span><br><span class="line"></span><br><span class="line">tar -zxvf nginx-1.8.1.tar.gz</span><br></pre></td></tr></table></figure></div>

<h5 id="6、执行编译安装"><a href="#6、执行编译安装" class="headerlink" title="6、执行编译安装"></a>6、执行编译安装</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd nginx-1.8.1</span><br><span class="line">./configure --prefix=/data/server/nginx --user=www --group=www</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在编译时出现一下错误</span></span><br><span class="line">src/core/ngx_murmurhash.c: In function ‘ngx_murmur_hash2’:</span><br><span class="line">src/core/ngx_murmurhash.c:37:11: error: this statement may fall through [-Werror=implicit-fallthrough=]</span><br><span class="line">h ^= data[2] &lt;&lt; 16;</span><br><span class="line">^~~~~~~~~~~~~~</span><br><span class="line">src/core/ngx_murmurhash.c:38:5: note: here</span><br><span class="line">case 2:</span><br><span class="line">^~~~</span><br><span class="line">src/core/ngx_murmurhash.c:39:11: error: this statement may fall through [-Werror=implicit-fallthrough=]</span><br><span class="line">h ^= data[1] &lt;&lt; 8;</span><br><span class="line">^~~~~~~~~~~~~</span><br><span class="line">src/core/ngx_murmurhash.c:40:5: note: here</span><br><span class="line">case 1:</span><br><span class="line">^~~~</span><br><span class="line">cc1: all warnings being treated as errors</span><br><span class="line">make[1]: *** [objs/Makefile:473: objs/src/core/ngx_murmurhash.o] Error 1</span><br><span class="line">make[1]: Leaving directory ‘/root/nginx-1.10.1‘</span><br><span class="line">make: *** [Makefile:8: build] Error 2</span><br></pre></td></tr></table></figure></div>

<p>解决方法</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打开 nginx的安装目录/objs/Makefile</span></span><br><span class="line">cd nginx-1.8.1/objs/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改Makefile文件去掉CFLAGS中的-Werror，再重新make</span></span><br></pre></td></tr></table></figure></div>

<p>查看编译后的目录</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ls /data/server/nginx</span><br></pre></td></tr></table></figure></div>

<h5 id="7、启动Nginx"><a href="#7、启动Nginx" class="headerlink" title="7、启动Nginx"></a>7、启动Nginx</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">/data/server/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></div>

<h5 id="8、其他命令"><a href="#8、其他命令" class="headerlink" title="8、其他命令"></a>8、其他命令</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动nginx</span></span><br><span class="line">/data/server/nginx/sbin/nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭nginx</span></span><br><span class="line">/data/server/nginx/sbin/nginx -s stop</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查nginx</span></span><br><span class="line">/data/server/nginx/sbin/nginx -t</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重载nginx（重启，执行此条命令时，Nginx必须是开启的，若是关闭的，会报错）</span></span><br><span class="line">/data/server/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动后查看Nginx进程是否启动成功</span></span><br><span class="line">netstat -tnulp | grep nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">优雅关闭，在退出前完成已经接受的连接请求</span></span><br><span class="line">/data/server/nginx/sbin/nginx  -s quit</span><br></pre></td></tr></table></figure></div>

<p>关闭防火墙</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemtcl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure></div>

<p>或者配置防火墙策略</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">firewalld-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">firewalld-cmd --reload</span><br></pre></td></tr></table></figure></div>

<h5 id="9、将nginx配置成系统服务"><a href="#9、将nginx配置成系统服务" class="headerlink" title="9、将nginx配置成系统服务"></a>9、将nginx配置成系统服务</h5><p>创建服务脚本</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure></div>

<p>服务脚本内容</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx - web server</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/data/server/nginx/logs/nginx.pid</span><br><span class="line">ExecStartPre=/data/server/nginx/sbin/nginx -t -c /data/server/nginx/conf/nginx.conf</span><br><span class="line">ExecStart=/data/server/nginx/sbin/nginx -c /data/server/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/data/server/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/data/server/nginx/sbin/nginx -s stop</span><br><span class="line">ExecQuit=/data/server/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></div>

<h5 id="10、配置文件"><a href="#10、配置文件" class="headerlink" title="10、配置文件"></a>10、配置文件</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>worker_processes 表示的是worker进程的数目</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改worker_processes 4</span></span><br><span class="line">[root@hecs-202792 conf]# ps -ef | grep nginx</span><br><span class="line">root     20538     1  0 11:57 ?        00:00:00 nginx: master process /data/server/nginx/sbin/nginx</span><br><span class="line">www      20539 20538  0 11:57 ?        00:00:00 nginx: worker process</span><br><span class="line">www      20540 20538  0 11:57 ?        00:00:00 nginx: worker process</span><br><span class="line">www      20541 20538  0 11:57 ?        00:00:00 nginx: worker process</span><br><span class="line">www      20542 20538  0 11:57 ?        00:00:00 nginx: worker process</span><br><span class="line">root     20552 19809  0 11:57 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure></div>

<p>error_log表示Nginx系统服务出现的错误信息所落盘的文件</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  notice; notice 日志级别</span></span><br></pre></td></tr></table></figure></div>

<p>pid表示Nginx进程的id</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pid        logs/nginx.pid;</span></span><br></pre></td></tr></table></figure></div>

<p>access_log nginx的日志，可以对nginx的日志进行配置</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">remote_addr <span class="comment">#客户端远程访问地址</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">remote_user  <span class="comment">#客户端用户名称</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">time_local <span class="comment">#访问的时间</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">request <span class="comment">#请求的URI和HTTP协议   &quot;GET /test/nginx/proxy HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">http_host <span class="comment">#请求地址，即浏览器中你输入的地址（IP或域名） 10.1.7.33</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">status    <span class="comment">#HTTP请求状态    200</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">upstream_status   <span class="comment">#upstream状态  200</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">body_bytes_sent   <span class="comment">#发送给客户端文件内容大小    38</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">http_referer  <span class="comment">#url跳转来源 -</span></span> </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">http_user_agent   <span class="comment">#用户终端浏览器等信息  &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">http_cookie	<span class="comment">#用户cookie信息  &quot;grafana_session=73d13d456cb4363f8a48f5501348669e&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ssl_protocol  <span class="comment">#SSL协议版本 TLSv1</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ssl_cipher    <span class="comment">#交换数据中的算法    RC4-SHA</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">upstream_addr <span class="comment">#后台upstream的地址，即真正提供服务的主机地址  &quot;10.1.7.33:8102&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">request_time  <span class="comment">#整个请求的总时间    0.012</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">upstream_response_time    <span class="comment">#请求过程中，upstream响应时间  0.012</span></span></span><br></pre></td></tr></table></figure></div>

<p>PV统计</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-202792 logs]# awk &#x27;&#123;print $6&#125;&#x27; access.log | wc -l</span><br><span class="line">949</span><br></pre></td></tr></table></figure></div>

<p>UV统计</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-202792 logs]# awk &#x27;&#123;print $13&#125;&#x27; access.log | sort -r |uniq -c |wc -l</span><br><span class="line">21</span><br></pre></td></tr></table></figure></div>

<p>独立IP统计</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hecs-202792 logs]# awk &#x27;&#123;print $1&#125;&#x27; access.log | sort -r |uniq -c | wc -l</span><br><span class="line">343</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统下进程的优先级</title>
    <url>/suxichuan/hudiBlog/2024/10/19/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<h3 id="Linux系统下进程的优先级"><a href="#Linux系统下进程的优先级" class="headerlink" title="Linux系统下进程的优先级"></a>Linux系统下进程的优先级</h3><p>​		Linux操作系统是一个多用户多任务的操作系统，处理机的分配是通过时间片轮转的方式进行的。当CPU的负载过高时，进程的优先级就会起作用。</p>
<h5 id="1、查看进程的优先级"><a href="#1、查看进程的优先级" class="headerlink" title="1、查看进程的优先级"></a>1、查看进程的优先级</h5><p>PR 数值越小优先级越高</p>
<p>NI 数值越小优先级越高，可以通过手动设置NI的数值，改变PR的数值。NI的范围是-20~19</p>
<p>使用top 命令查看进程的优先级</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\AppData\Roaming\Typora\typora-user-images\image-20230516181620532.png"
                      alt="image-20230516181620532"
                ><figcaption>image-20230516181620532</figcaption></figure></p>
<h5 id="2、调整进程的优先级"><a href="#2、调整进程的优先级" class="headerlink" title="2、调整进程的优先级"></a>2、调整进程的优先级</h5><h6 id="①可以使用一下命令查看进程的PID值"><a href="#①可以使用一下命令查看进程的PID值" class="headerlink" title="①可以使用一下命令查看进程的PID值"></a>①可以使用一下命令查看进程的PID值</h6><div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ps</span> <span class="literal">-ef</span> </span><br><span class="line"><span class="built_in">ps</span> aux </span><br><span class="line">top <span class="literal">-bn</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<h6 id="②使用top进入动态显示的进程列表输入r，在输入要调整的进程优先级的PID值，接着继续输入要调整的NI值"><a href="#②使用top进入动态显示的进程列表输入r，在输入要调整的进程优先级的PID值，接着继续输入要调整的NI值" class="headerlink" title="②使用top进入动态显示的进程列表输入r，在输入要调整的进程优先级的PID值，接着继续输入要调整的NI值"></a>②使用top进入动态显示的进程列表输入r，在输入要调整的进程优先级的PID值，接着继续输入要调整的NI值</h6><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\AppData\Roaming\Typora\typora-user-images\image-20230516182533084.png"
                      alt="image-20230516182533084"
                ><figcaption>image-20230516182533084</figcaption></figure></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\AppData\Roaming\Typora\typora-user-images\image-20230516182913127.png"
                      alt="image-20230516182913127"
                ><figcaption>image-20230516182913127</figcaption></figure></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\AppData\Roaming\Typora\typora-user-images\image-20230516182947261.png"
                      alt="image-20230516182947261"
                ><figcaption>image-20230516182947261</figcaption></figure></p>
<h5 id="3、使用renice命令设置进程的优先级"><a href="#3、使用renice命令设置进程的优先级" class="headerlink" title="3、使用renice命令设置进程的优先级"></a>3、使用renice命令设置进程的优先级</h5><div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">语法：renice <span class="built_in">NI</span>优先级值 PID</span><br></pre></td></tr></table></figure></div>

<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\AppData\Roaming\Typora\typora-user-images\image-20230516193023131.png"
                      alt="image-20230516193023131"
                ><figcaption>image-20230516193023131</figcaption></figure></p>
<h5 id="4、使用nice命令来启动程序并设置进程测优先级"><a href="#4、使用nice命令来启动程序并设置进程测优先级" class="headerlink" title="4、使用nice命令来启动程序并设置进程测优先级"></a>4、使用nice命令来启动程序并设置进程测优先级</h5><div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">语法：nice <span class="built_in">NI</span>优先级值 进程名称</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>nice命令只能调整没有运行的程序优先级</p>
</blockquote>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\AppData\Roaming\Typora\typora-user-images\image-20230516193520030.png"
                      alt="image-20230516193520030"
                ><figcaption>image-20230516193520030</figcaption></figure></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>进程</tag>
        <tag>优先级</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux磁盘管理笔记</title>
    <url>/suxichuan/hudiBlog/2024/10/19/Linux%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="Linux磁盘管理笔记"><a href="#Linux磁盘管理笔记" class="headerlink" title="Linux磁盘管理笔记"></a>Linux磁盘管理笔记</h4><h5 id="1、基本常识"><a href="#1、基本常识" class="headerlink" title="1、基本常识"></a>1、基本常识</h5><p>磁盘</p>
<ul>
<li>磁盘容量&#x3D;磁头数X柱面数X扇区数X每个扇区的大小</li>
<li>磁头数(heads)：表示硬盘总共有几个磁头，也可以理解成为硬盘有几个盘面，然后乘以二</li>
<li>柱面数(Cylinders)：表示硬盘每一面盘片有几条磁道</li>
<li>扇区数(Sectors)：表示每条磁道上有几个扇区，每个扇区的大小是固定的，为512Byte.扇区也是磁盘的最小存储单位</li>
</ul>
<p>接口</p>
<ul>
<li>IDE 硬盘接口 (Integrated Drive Electronics，并口，即电子集成驱动器)：早起机械键盘的主要接口</li>
<li>SATA 接口 (SerialATA，串口) 是速度更高的硬盘标准，具备了更高的传输速度，并具备了更强的纠错能力。</li>
<li>SCSI接口(Small Computer System Interface，小型计算机系统接口)广泛应用在服务器上,具有应用范围广、多任务、带宽大、CPU 占用率低及支持热插拔等优点。</li>
</ul>
<h5 id="2、Linux文件系统"><a href="#2、Linux文件系统" class="headerlink" title="2、Linux文件系统"></a>2、Linux文件系统</h5><p>Linux操作系统文件特性：</p>
<ul>
<li>super block(超级块):记录整个文件系统的信息，包括 block 与 inode 的总量，已经使用的 inode 和 block 的数量，未使用的 inode 和block 的数量，block 与inode 的大小，文件系统的挂载时间，最近一次的写入时间，最近一次的磁盘检验时间等。</li>
<li>date block(数据块，也称作 block): 用来实际保存数据的(柜子的隔断)，block 的大小(1KB、2KB 或4KB)和数量在格式化后就已经决定，不能改变，除非重新格式化 (制作柜子的时候，隔断大小就已经决定，不能更改，除非重新制作柜子)。每个 block只能保存一个文件的数据，要是文件数据小于一个 block 块，那么这个 block 的剩余空间不能被其他文件使用，要是文件数据大于一个 block 块，则占用多个 block 块。Windows 中磁盘碎片整理工具的原理就是把一个文件占用的多个 block 块尽量整理到一起，这样可以加快读写速度。</li>
<li>inode (i 节点，柜子门上的标签):用来记录文件的权限 (r、w、x)，文件的所有者和属组，文件的大小，文件的状态改变时间 (ctime)，文件的最近一次读取时间 (atime)，文件的最近一次修改时间(mtime)，文件的数据真正保存的 block 编号。每个文件需要占用一个inode。</li>
</ul>
<h5 id="3、常见的硬盘管理命令"><a href="#3、常见的硬盘管理命令" class="headerlink" title="3、常见的硬盘管理命令"></a>3、常见的硬盘管理命令</h5><ul>
<li>df命令</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">df -ahT</span><br><span class="line">-a 显示特殊文件系统，这些文件系统几乎都是保存在内存中的。如/proc，因为是挂载在内存中，所以占用量都是0</span><br><span class="line">-h 单位不再只用KB，而是换算成习惯单位</span><br><span class="line">-T 多出了文件系统美型一列</span><br></pre></td></tr></table></figure></div>

<ul>
<li>du 命令</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">du [选项][目录或文件名]</span><br><span class="line">选项：</span><br><span class="line">-a 显示每个子文件的磁盘占用量。默认只统计子目录的磁盘占用量</span><br><span class="line">-h 使用习惯单位显示磁盘占用量，如 KB，MB 或 GB 等</span><br><span class="line">-s 统计总占用量，而不列出子目录和子文件的占用量</span><br><span class="line">du 与 df 的区别: du 是用于统计文件大小的，统计的文件大小是准确的: df是用于统计空间大小的，统计的剩余空是准确的</span><br></pre></td></tr></table></figure></div>

<ul>
<li>fsck文件系统修复命令</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">fsck -y /dev/sdb1 #自动修复</span><br></pre></td></tr></table></figure></div>

<ul>
<li>dumpe2fs 显示磁盘状态</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">dumpe2fs /dev/vda1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Filesystem volume name: 卷标名</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Last mounted on:挂载点</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Filesystem UUID: UUID</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Default mount options:挂载参数</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Filesystem state:文件系统状态</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Inode count:iNode总数</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Block count:block的总数</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Free blocks:剩余block数</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Free inodes:剩余iNode数</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Block size:块大小</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>stat 查看文件的详细时间</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">stat 文件名 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">access 访问时间</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">modify 数据修改时间</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">change 状态修改时间</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>判断文件类型</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">file 文件名 判断文件类型</span><br><span class="line">type 文件名 判断命令类型</span><br></pre></td></tr></table></figure></div>

<ul>
<li>fdisk 命令手工分区</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk -l #查看系统所有的硬盘和分区</span><br></pre></td></tr></table></figure></div>

<p>fdisk 交互命令说明</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>设置可引导标记</td>
</tr>
<tr>
<td>b</td>
<td>编辑bsd磁盘标签</td>
</tr>
<tr>
<td>d</td>
<td>删除一个分区</td>
</tr>
<tr>
<td>l</td>
<td>显示已知的文件系统类型。82 为 Linux swap 分区，83 为 Linux 分区</td>
</tr>
<tr>
<td>m</td>
<td>显示帮助菜单</td>
</tr>
<tr>
<td>n</td>
<td>新建分区</td>
</tr>
<tr>
<td>q</td>
<td>不保存退出</td>
</tr>
<tr>
<td>p</td>
<td>显示分区列表</td>
</tr>
<tr>
<td>t</td>
<td>改变一个分区的系统 ID</td>
</tr>
<tr>
<td>v</td>
<td>验证分区表</td>
</tr>
<tr>
<td>w</td>
<td>保存退出</td>
</tr>
</tbody></table>
<p>partprobe 强制重读所有分区文件，重新挂载分区文件内所有分区。这不是分区必须partprobe命令，如果没有提示重启，可以不执行，也可以重启系统</p>
<ul>
<li>格式化	建立文件系统	ext3是linux默认文件系统</li>
</ul>
<p>mkfs	-t	ext4	&#x2F;dev&#x2F;sdb1</p>
<p>mkfs	-t	ext4	&#x2F;dev&#x2F;sdb5</p>
<p>mkfs 命令非常简单易用，不过是不能调整分区的默认参数的(比如块大小是 4096)，这些默认参数除非特殊情况，否则不需要调整，如果想要调整就需要使用 mke2fs 命令进行重新格式化，命令格式如下:</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"> mke2fs [选项] 分区设备文件名</span><br><span class="line"> 选项:</span><br><span class="line"> -t 文件系统:指定格式化成哪个文件系统，如ext2，ext3，ext4</span><br><span class="line"> -b 字节:指定 block 块的大小</span><br><span class="line">-i 字节:指定“字节/inode”的比例，也就是多少个字节分配一个 inode</span><br><span class="line">-j:建立带有 ext3日志功能的文件系统</span><br><span class="line">-L 卷标名:给文件系统设置卷标名，就不使用 e2label 命令设定了</span><br></pre></td></tr></table></figure></div>

<p>mke2fs -t ext4 -b 2048 &#x2F;dev&#x2F;vda1  #格式化分区，并制定block大小为2048</p>
<ul>
<li>建立挂载点：</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir	/disk1 #来挂载/dev/sdb1</span><br><span class="line">mkdir	/disk5 #来挂载/dev/sdb2</span><br></pre></td></tr></table></figure></div>

<ul>
<li>挂载</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mount  /dev/sdb1 /disk1</span><br><span class="line">mount  /dev/sdb2 /disk2</span><br></pre></td></tr></table></figure></div>

<ul>
<li>自动挂载</li>
</ul>
<p>修改分区自动挂载文件 &#x2F;etc&#x2F;fstab </p>
<blockquote>
<p>注意此文件直接参与系统启动，如果修改错误，系统启动报错</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">/dev/sdb1  /disk1 ext3 defaults 1 2</span><br><span class="line">第一列:设备文件名称</span><br><span class="line">第二列:挂载点</span><br><span class="line">第三列:文件系统</span><br><span class="line">第四列:挂载选项</span><br><span class="line">第五列:是否可以被备份 0不备份	1每天备份	2不定期备份</span><br><span class="line">第六列:是否检测磁盘fsck 0不检测	1启动时检测	2启动后检测</span><br></pre></td></tr></table></figure></div>

<p>也可以使用UUID 进行挂载，UUID(硬盘通用唯一识别码，可以理解为硬盘的ID)</p>
<p>使用 一下命令可以查看UUID</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">dumpe2fs /dev/sdb5</span><br><span class="line">ls -l /dev/disk/by-uuid/ </span><br></pre></td></tr></table></figure></div>

<ul>
<li>parted 命令分区</li>
</ul>
<p>Linux 系统中有两种常见的分区表 MBR 分区表(主引导记录分区表)和GPT分区表(GUID分区表)。其中:</p>
<p>MBR 分区表:支持的最大分区是 2TB (1TB&#x3D;1024GB):最多支持4个主分区，或3个主分区1个扩展分区。</p>
<p>GPT分区表:支持最大18EB 的分区 (1EB&#x3D;1024PB&#x3D;102*1024TB):最多支持 128 个分区，其中1个系统保留分区，127 个用户自定义分区。</p>
<p>不过 parted 命令也有点小问题，就是命令自身分区的时候只能格式化成ext2 文件系统，不支持ext3 文件系统，那就更不用说 ext4 文件系统了(截止到 Cent0S 6.8 还是这样，这里只是指不能用parted命令把分区格式化成 ext4 文件系统，但是 parted 命令还是可以识别ext4 文件系统的)。不过这没有太多的影响，因为可以先分区再用 mkfs 进行格式化。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>check number</td>
<td>做一次简单的文件系统检测</td>
</tr>
<tr>
<td>CP [FROM-DEVICE] FROM-NUMBER TO-NUMBER</td>
<td>复制文件系统到另外一个分区</td>
</tr>
<tr>
<td>help</td>
<td>显示所有命令</td>
</tr>
<tr>
<td>mklabel,mktable LABEL-TYPE</td>
<td>创建新的磁盘卷标(分区表)</td>
</tr>
<tr>
<td>mkfs NUMBER FS-TYPE</td>
<td>在分区上建立文件系统</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>磁盘管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统服务</title>
    <url>/suxichuan/hudiBlog/2024/10/19/Linux%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h4 id="Linux系统服务"><a href="#Linux系统服务" class="headerlink" title="Linux系统服务"></a>Linux系统服务</h4><h5 id="一、服务的简介与分类"><a href="#一、服务的简介与分类" class="headerlink" title="一、服务的简介与分类"></a>一、服务的简介与分类</h5><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\AppData\Roaming\Typora\typora-user-images\image-20230801093639016.png"
                      alt="image-20230801093639016"
                ><figcaption>image-20230801093639016</figcaption></figure></p>
<p>1、RPM 包默认安装的服务</p>
<p>这些服务是通过 RPM 包安装的，可以被服务管理命令识别。又分为两种子分类：</p>
<ul>
<li><p>独立的服务：就是独立启动的意思，这类型的服务可以自行启动，而不用依赖其他的管理服务。不依赖其他管理服务，那么当客户端请求访问时，独立的服务响应请求更快速。Linux 中目前大多数服务都是独立的服务，比如 apache 服务，FTP 服务，Samba 服务等。</p>
</li>
<li><p>基于 xinetd 的服务：这种服务就不能独立启动了，而是要依靠管理服务来调用这种服务。这个负责管理的服务就是 xinetd 服务，xinetd 服务是系统的超级守护进程。xinetd服务的作用就是管理不能独立启动的服务，当有客户端请求时，先请求 xinetd 服务，由 xinetd 服务去唤醒相对应的服务。当客户端请求结束后，被唤醒的服务会关闭并释放资源。这样做的好处是只需要持续启动 xinetd 服务，而其他基于 xinetd 的服务只有在需要时才启动，不会占用过的的服务器资源。但是这种服务由于在有客户端请求时才会被唤醒，所以相应时间相对较慢。</p>
<blockquote>
<p>注意 目前基于xinetd的服务基本不用了</p>
</blockquote>
</li>
</ul>
<p>2、源码包安装的服务</p>
<p>3、查询已经安装的服务和区分服务</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig  --list 【服务名】  #--list：列出所有 RPM 默认安装服务的 自启动状态</span><br><span class="line"></span><br><span class="line">Note: This output shows SysV services only and does not include native</span><br><span class="line">      systemd services. SysV configuration data might be overridden by native</span><br><span class="line">      systemd configuration.</span><br><span class="line"></span><br><span class="line">      If you want to list systemd services use &#x27;systemctl list-unit-files&#x27;.</span><br><span class="line">      To see services enabled on particular target use</span><br><span class="line"> 	  &#x27;systemctl list-dependencies [target]&#x27;.</span><br><span class="line"></span><br><span class="line">hostguard      	0:off	1:off	2:on	3:on	4:on	5:on	6:off</span><br><span class="line">multi-queue-hw 	0:off	1:off	2:on	3:on	4:on	5:on	6:off</span><br><span class="line">netconsole     	0:off	1:off	2:off	3:off	4:off	5:off	6:off</span><br><span class="line">network        	0:off	1:off	2:off	3:off	4:off	5:off	6:off</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">利用systemctl list-unit-files查看所有的系统服务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>二、RPM 包默认安装的服务管理</p>
<ol>
<li>独立服务管理</li>
</ol>
<ul>
<li><p>独立服务的启动管理</p>
</li>
<li><p>使用&#x2F;etc&#x2F;init.d&#x2F;目录中的启动脚本启动服务</p>
</li>
<li><p>使用 service 命令来启动独立的服务</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start httpd</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>   2.独立服务的自启动管理</p>
<ul>
<li><p>使用 chkconfig 服务自启动管理命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig [--level 运行级别] [独立服务名] [on|off]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">选项：</span></span><br><span class="line">--level： 设定在哪个运行级别中开机自启动（on），或是关闭自启动（off）</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="二、源码包安装的服务管理"><a href="#二、源码包安装的服务管理" class="headerlink" title="二、源码包安装的服务管理"></a>二、源码包安装的服务管理</h5><p>1、源码包服务的启动管理</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/apache2/bin/apachectl start|stop|restart|…</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务</tag>
      </tags>
  </entry>
  <entry>
    <title>BOSS直聘数据分析docker部署笔记</title>
    <url>/suxichuan/hudiBlog/2024/10/19/docker%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[
  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <i class="notel-icon fa-solid fa-info"></i><p>信息</p>

    </div>
    <div class="notel-content">
      <p>换行测试<br>换行测试<br>换行测试</p>

    </div>
  </div>
<h2 id="BOSS直聘数据分析docker部署"><a href="#BOSS直聘数据分析docker部署" class="headerlink" title="BOSS直聘数据分析docker部署"></a>BOSS直聘数据分析docker部署</h2><h6 id="一、Linux安装Docker-CE"><a href="#一、Linux安装Docker-CE" class="headerlink" title="一、Linux安装Docker-CE"></a>一、Linux安装Docker-CE</h6><ol>
<li><p>阿里云加速器地址【<a class="link"   href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors%E3%80%91" >https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors】 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>Centos官方源安装教程</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装一些系统必要的工具</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加软件源信息</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查/etc/yum.repos.d/docker-ce.repo 中的ur[地址是不是都是阿里云的]</span> </span><br><span class="line">cat /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不是，那么把download-stage.docker.com全部替换为mirrors。aliyun.com/docker-ce/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新并安装Docker-CE</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用docker version可以看到client端的信息</span></span><br><span class="line">docker version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动服务器再次使用docker version 就可以看到服务器端和客户端的docker信息了</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Ubuntu安装</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装必要的一昨系统工周</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装GPG证书</span></span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">写入软件源信息</span></span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新并安装Docker-CE</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启Docker服务</span></span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h6 id="二、Docker加速器的地址"><a href="#二、Docker加速器的地址" class="headerlink" title="二、Docker加速器的地址"></a>二、Docker加速器的地址</h6><ul>
<li><p>在&#x2F;etc&#x2F;docker&#x2F;daemon.json文件中加入一下内容</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;https://3703jm2d.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>或直接使用一下命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://3703jm2d.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h6 id="三、运行boss数据分析程序"><a href="#三、运行boss数据分析程序" class="headerlink" title="三、运行boss数据分析程序"></a>三、运行boss数据分析程序</h6><ol>
<li><p>docker客户端和服务端都成功运行后从阿里云拉取boss数据分析程序(将同一程序的各个组件均维护在阿里云的sxh_repo镜像仓库中)不同组件用tag版本号来表示</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\AppData\Roaming\Typora\typora-user-images\image-20231216212355618.png"
                      alt="image-20231216212355618"
                ><figcaption>image-20231216212355618</figcaption></figure></p>
<ul>
<li><p>1.0版本的镜像是boss数据分析的django程序。</p>
</li>
<li><p>latest版本是boss数据分析程序的数据库。</p>
</li>
</ul>
<p>运行一下命令将镜像从阿里云仓库拉取到本地</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/sxh_docker_repo/sxh_repo:1.0  #1.0版本的镜像是boss数据分析的django程序</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/sxh_docker_repo/sxh_repo:latest #latest版本是boss数据分析程序的数据库</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>镜像拉取后通过一下命令运行程序</p>
<ul>
<li><p>创建配置文件所在目录 mkdir -p &#x2F;root&#x2F;boss&#x2F;bossdome,在切换到&#x2F;root&#x2F;boss&#x2F;bossdome</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /root/boss/bossdome #配置文件所在目录</span><br><span class="line">cd /root/boss/bossdome</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>yum install -y lrzsz 下载文件上传的工具</p>
</li>
<li><p>命令rz会调出一个弹出框选择要上传的配置文件settings.py。将django程序的配置文件settings.py中数据库连接地址改为当前操作系统的地址即可</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">rz  #上传的配置文件settings.py到/root/boss/bossdome</span><br><span class="line">vi settings.py #修改settings.py中数据库连接的host地址为本机地址</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">例如</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,</span><br><span class="line">        &#x27;NAME&#x27;: &#x27;bossinfo&#x27;,</span><br><span class="line">        &#x27;USER&#x27;: &#x27;root&#x27;,</span><br><span class="line">        &#x27;PASSWORD&#x27;: &#x27;123456&#x27;, #密码不变</span><br><span class="line">        &#x27;HOST&#x27;: &#x27;你的服务器地址&#x27;,</span><br><span class="line">        &#x27;POST&#x27;: &#x27;3306&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>3.运行boss直聘数据分析docker程序</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name bossdb -p 3306:3306  registry.cn-hangzhou.aliyuncs.com/sxh_docker_repo/sxh_repo:latest  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据库程序启动后。用navcat连接数据库，创建bossinfo数据库，然后执行bossinfo.sql，在启动django程序</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里也可以运行docker官方的mysql:5.7数据库命令如下</span></span><br><span class="line">docker run -d -p 3306:3306 --privileged=true -v /var/mysql/log:/var/log/mysql -v /var/mysql/data:/var/lib/mysql -v /var/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456  --name mysql mysql:5.7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MYSQL_ROOT_PASSWORD指定mysql登陆的密码，这里的密码要和settings.py文件中的对应</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">boss直聘程序docker运行</span></span><br><span class="line">docker run -d --name boss -p 8000:8000 -v /root/boss/bossdome/settings.py:/root/boss/bossdome/djangoProject1/settings.py registry.cn-hangzhou.aliyuncs.com/sxh_docker_repo/sxh_repo:1.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-v /root/boss/bossdome/settings.py:/root/boss/bossdome/djangoProject1/settings.py 是将主机的/root/boss/bossdome/settings.py去替换容器中/root/boss/bossdome/djangoProject1/settings.py文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v 是挂载数据卷</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p 是将本机的8000端口映射到docker容器中的8000端口</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
      <tags>
        <tag>数据分析</tag>
        <tag>docker</tag>
        <tag>镜像</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/suxichuan/hudiBlog/2024/10/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>Flume工具</title>
    <url>/suxichuan/hudiBlog/2024/10/19/flume/</url>
    <content><![CDATA[<h4 id="flume"><a href="#flume" class="headerlink" title="flume"></a>flume</h4><h5 id="1、flume概述："><a href="#1、flume概述：" class="headerlink" title="1、flume概述："></a>1、flume概述：</h5><ol>
<li><p>定义：Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统。Flume基于流式架构，灵活简单。</p>
</li>
<li><p>flume架构</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\Desktop\笔记\flume\图片\微信图片_20220728182732.jpg"
                      style="zoom:150%;" 
                >

<ul>
<li><p>agent：</p>
<ol>
<li>Agent是一个JVM进程，它以事件的形式将数据从源头送至目的。</li>
<li>Agent主要有3个部分组成，Source、Channel、Sink。</li>
</ol>
</li>
<li><p>source</p>
<p>Source是负责接收数据到Flume Agent的组件。Source组件可以处理各种类型、各种格式的日志数据，包括<strong>avro</strong>、thrift、<strong>exec</strong>、jms、<strong>spooling directory</strong>、<strong>netcat</strong>、 <strong>taildir</strong> 、sequence generator、syslog、http、legacy。</p>
</li>
<li><p>sink</p>
<ol>
<li>Sink不断地轮询Channel中的事件且批量地移除它们，并将这些事件批量写入到存储或索引系统、或者被发送到另一个Flume Agent。</li>
<li>Sink组件目的地包括<strong>hdfs</strong>、<strong>logger</strong>、<strong>avro</strong>、thrift、ipc、<strong>file</strong>、<strong>HBase</strong>、solr、自定义。</li>
</ol>
</li>
<li><p>channel</p>
<ol>
<li>Channel是位于Source和Sink之间的缓冲区。因此，Channel允许Source和Sink运作在不同的速率上。Channel是线程安全的，可以同时处理几个Source的写入操作和几个Sink的读取操作。</li>
<li>Flume自带两种Channel：Memory Channel和File Channel。</li>
<li>Memory Channel是内存中的队列。Memory Channel在不需要关心数据丢失的情景下适用。如果需要关心数据丢失，那么Memory Channel就不应该使用，因为程序死亡、机器宕机或者重启都会导致数据丢失。</li>
<li>File Channel将所有事件写到磁盘。因此在程序关闭或机器宕机的情况下不会丢失数据。</li>
</ol>
</li>
<li><p>event</p>
<p>传输单元，Flume数据传输的基本单元，以Event的形式将数据从源头送至目的地。Event由<strong>Header</strong>和<strong>Body</strong>两部分组成，Header用来存放该event的一些属性，为K-V结构，Body用来存放该条数据，形式为字节数组。</p>
<table>
<thead>
<tr>
<th>header(k,v)</th>
<th>body(byte array)</th>
</tr>
</thead>
</table>
</li>
</ul>
</li>
</ol>
<h5 id="2、flume入门"><a href="#2、flume入门" class="headerlink" title="2、flume入门"></a>2、flume入门</h5><ol>
<li><p>安装flume地址</p>
<ul>
<li>官网地址：<a class="link"   href="http://flume.apache.org/" >http://flume.apache.org/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>文档地址：<a class="link"   href="http://flume.apache.org/FlumeUserGuide.html" >http://flume.apache.org/FlumeUserGuide.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
<li><p>安装部署</p>
<p>hadoop版本3.x要删除lib文件夹下的guava-11.0.2.jar包以兼容Hadoop 3.x</p>
</li>
<li><p>官方入门案例</p>
<ol>
<li><p>需求：使用Flume监听一个端口，收集该端口数据，并打印到控制台。</p>
</li>
<li><p>安装netcat工具</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yun install -y nc</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建Flume Agent配置文件flume-netcat-logger.conf</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">添加内容如下：</span><br><span class="line"># Name the components on this agent    #a1表示agent的名字</span><br><span class="line">a1.sources = r1  ##r1表示a1 agent一个source的名字</span><br><span class="line">a1.sinks = k1    ##k1表示a1 agent一个sink的名字</span><br><span class="line">a1.channels = c1 ##c1表示a1 agent一个channel的名字</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = netcat   ##表示r1 source的类型也就是输入源的类型</span><br><span class="line">a1.sources.r1.bind = localhost  ##要监听的主机的IP </span><br><span class="line">a1.sources.r1.port = 44444  ###要监听的端口号是多少</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger   ##a1的数据输出的目的地是控制台</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory   ##表示a1 channel的类型是memory内存型</span><br><span class="line">a1.channels.c1.capacity = 1000 ##表示a1 channel的事件容量是1000条</span><br><span class="line">a1.channels.c1.transactionCapacity = 100  ##表示a1的channel收集到100条event后再去提交事务</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1   ##表示吧r1和c1连接起来</span><br><span class="line">a1.sinks.k1.channel = c1      ##表示把k1和c1连接起来</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动flume</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf/ --name a1 --conf-file job/flume-netcat-logger.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/flume-ng agent -c conf/ -n a1 -f job/flume-netcat-logger.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></div>

<p>参数说明：</p>
<p>​    –conf&#x2F;-c：表示配置文件存储在conf&#x2F;目录</p>
<p>​    –name&#x2F;-n：表示给agent起名为a1</p>
<p>​    –conf-file&#x2F;-f：flume本次启动读取的配置文件是在job文件夹下的flume-telnet.conf文件。</p>
<p>​    -Dflume.root.logger&#x3D;INFO,console ：-D表示flume运行时动态修改flume.root.logger参数属性值，并将控制台日志打印级别设置为INFO级别。日志级别包括:log、info、warn、error。</p>
</li>
</ol>
</li>
<li><p>实时监控单个追加文件案例。</p>
<ol>
<li><p>需求说明：实时监控Hive日志，并上传到HDFS中</p>
</li>
<li><p>配置文件编写：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">##自己编写的配置</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks=k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.positionFile =/home/hdfs/flume/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = f1</span><br><span class="line">a1.sources.r1.filegroups.f1 = /home/hdfs/flume/data/.*\.txt</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type=hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://master:8020/flume/events/%Y-%m-%d/%H%M/%S</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = events-</span><br><span class="line">a1.sinks.k1.hdfs.round = true</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 10</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = minute</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp=true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line"></span><br><span class="line">#####################################################################################################</span><br><span class="line">#####################################################################################################</span><br><span class="line">#课件的案例</span><br><span class="line"># Name the components on this agent</span><br><span class="line">a2.sources = r2</span><br><span class="line">a2.sinks = k2</span><br><span class="line">a2.channels = c2</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a2.sources.r2.type = exec</span><br><span class="line">a2.sources.r2.command = tail -F /opt/module/hive/logs/hive.log</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a2.sinks.k2.type = hdfs</span><br><span class="line">a2.sinks.k2.hdfs.path = hdfs://master:8020/flume/%Y%m%d/%H</span><br><span class="line">#上传文件的前缀</span><br><span class="line">a2.sinks.k2.hdfs.filePrefix = logs-</span><br><span class="line">#是否按照时间滚动文件夹</span><br><span class="line">a2.sinks.k2.hdfs.round = true</span><br><span class="line">#多少时间单位创建一个新的文件夹</span><br><span class="line">a2.sinks.k2.hdfs.roundValue = 1</span><br><span class="line">#重新定义时间单位</span><br><span class="line">a2.sinks.k2.hdfs.roundUnit = hour</span><br><span class="line">#是否使用本地时间戳</span><br><span class="line">a2.sinks.k2.hdfs.useLocalTimeStamp = true</span><br><span class="line">#积攒多少个Event才flush到HDFS一次</span><br><span class="line">a2.sinks.k2.hdfs.batchSize = 100</span><br><span class="line">#设置文件类型，可支持压缩</span><br><span class="line">a2.sinks.k2.hdfs.fileType = DataStream</span><br><span class="line">#多久生成一个新的文件</span><br><span class="line">a2.sinks.k2.hdfs.rollInterval = 60</span><br><span class="line">#设置每个文件的滚动大小</span><br><span class="line">a2.sinks.k2.hdfs.rollSize = 134217700</span><br><span class="line">#文件的滚动与Event数量无关</span><br><span class="line">a2.sinks.k2.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a2.channels.c2.type = memory</span><br><span class="line">a2.channels.c2.capacity = 1000</span><br><span class="line">a2.channels.c2.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a2.sources.r2.channels = c2</span><br><span class="line">a2.sinks.k2.channel = c2</span><br><span class="line"></span><br><span class="line">##########################################################################################################################################################################################################</span><br><span class="line">#老师讲的案例：</span><br><span class="line">2. 入门案例 2.1  实时监控单个追加文件,将内容打印到控制台</span><br><span class="line">配置文件名字: exec-flume-logger.conf</span><br><span class="line">##name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line">##source</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -F /home/hdfs/test/data.txt</span><br><span class="line"></span><br><span class="line">##channel</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">###sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1 </span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
<li><p>实时监控目录下多个新文件</p>
<ol>
<li><p>案例需求：使用Flume监听整个目录的文件，并上传至HDFS</p>
</li>
<li><p>配置文件编写</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">###我自己写的Spooling Directory Source</span><br><span class="line">spooling-flume-hdfs.conf 配置文件如下</span><br><span class="line">#name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1 </span><br><span class="line">#sources</span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.spoolDir = /home/hdfs/test/spoolDir </span><br><span class="line">a1.sources.r1.fileHeader = true</span><br><span class="line">#sinks</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path =  hdfs://master:8020/flume/events/%Y-%m-%d</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = logs-</span><br><span class="line">a1.sinks.k1.hdfs.round = true</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 10</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = second</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line">##channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line">##bind</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">###老师讲的</span><br><span class="line">4. 入门案例 3  实时监控目录下的新文件,将内容上传到HDFS中</span><br><span class="line">配置文件名字: spooling-flume-hdfs.conf</span><br><span class="line"></span><br><span class="line">#Named</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1 </span><br><span class="line"></span><br><span class="line">#Source</span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.spoolDir = /opt/module/flume-1.9.0/jobs/spooling</span><br><span class="line">a1.sources.r1.fileSuffix = .COMPLETED</span><br><span class="line">a1.sources.r1.ignorePattern = .*\.tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Channel</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">#Sink</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://hadoop102:8020/flume/%Y%m%d/%H</span><br><span class="line">#上传文件的前缀</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = logs-</span><br><span class="line">#是否按照时间滚动文件夹</span><br><span class="line">a1.sinks.k1.hdfs.round = true</span><br><span class="line">#多少时间单位创建一个新的文件夹</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 1</span><br><span class="line">#重新定义时间单位</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = hour</span><br><span class="line">#是否使用本地时间戳</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line">#积攒多少个Event才flush到HDFS一次</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 100</span><br><span class="line">#设置文件类型，可支持压缩</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line">#多久生成一个新的文件</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 60</span><br><span class="line">#设置每个文件的滚动大小</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line">#文件的滚动与Event数量无关</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line">#Bind</span><br><span class="line">a1.sources.r1.channels = c1 </span><br><span class="line">a1.sinks.k1.channel = c1 </span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
<li><p>实时监控多个目录下的多个追加文件</p>
<p>Exec source适用于监控一个实时追加的文件，不能实现断点续传；Spooldir Source适合用于同步新文件，但不适合对实时追加日志的文件进行监听并同步；而Taildir Source适合用于监听多个实时追加的文件，并且能够实现断点续传。</p>
<ol>
<li><p>案例需求:使用Flume监听整个目录的实时追加文件，并上传至HDFS</p>
</li>
<li><p>配置文件编写：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.positionFile = /home/hdfs/flume/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = f1 f2</span><br><span class="line">a1.sources.r1.filegroups.f1 = /home/hdfs/test/data/.*\.txt</span><br><span class="line">a1.sources.r1.filegroups.f2 = /home/hdfs/test/data/.*\.log</span><br><span class="line"></span><br><span class="line">#sinks</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path =  hdfs://master:8020/flume/tail/%Y-%m-%d</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = tail-</span><br><span class="line">a1.sinks.k1.hdfs.round = true</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 10</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = second</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">#bind</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
</ol>
<h5 id="3、flume进阶"><a href="#3、flume进阶" class="headerlink" title="3、flume进阶"></a>3、flume进阶</h5><ol>
<li><p>flume事务</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\Desktop\笔记\flume\图片\flume事务.jpg"
                     
                ></p>
</li>
<li><p>agent内部原理</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\Desktop\笔记\flume\图片\微信图片_20220728222936.jpg"
                     
                ></p>
<ul>
<li>source采集到日志服务器或者是端口等的数据时，报数据包装成event</li>
<li>在批量的放入临时缓存putlist，并通过channel processor处理事件</li>
<li>channel processor将事件传递给拦截器链，对事件进行过滤</li>
<li>再把事件还回channel processor并将每个事件给channel selector</li>
<li>返回写入事件的channel 列表</li>
<li>根据channel选择器的结果，将事件写入对应得channel中</li>
<li>doTake将事件批量的取到sink processor中再通过事务写入到相应的目标中</li>
</ul>
<ol>
<li><p>ChannelSelector</p>
<p>ChannelSelector的作用就是选出Event将要被发往哪个Channel。其共有两种类型，分别是Replicating（复制）和Multiplexing（多路复用）。</p>
<p>ReplicatingSelector会将同一个Event发往所有的Channel，Multiplexing会根据相应的原则，将不同的Event发往不同的Channel。</p>
</li>
<li><p>SinkProcessor</p>
<p>SinkProcessor共有三种类型，分别是DefaultSinkProcessor、LoadBalancingSinkProcessor和FailoverSinkProcessor</p>
<p>DefaultSinkProcessor对应的是单个的Sink，LoadBalancingSinkProcessor和FailoverSinkProcessor对应的是Sink Group，LoadBalancingSinkProcessor可以实现负载均衡的功能，FailoverSinkProcessor可以错误恢复的功能。</p>
</li>
</ol>
</li>
<li><p>flume的拓扑结构</p>
<ol>
<li><p>简单串联：这种模式是将多个flume顺序连接起来了，从最初的source开始到最终sink传送的目的存储系统。此模式不建议桥接过多的flume数量， flume数量过多不仅会影响传输速率，而且一旦传输过程中某个节点flume宕机，会影响整个传输系统。</p>
<p>即，一个agent的sink连接另个agent的source</p>
</li>
<li><p>复制和多虑复用：Flume支持将事件流向一个或者多个目的地。这种模式可以将相同数据复制到多个channel中，或者将不同数据分发到不同的channel中，sink可以选择传送到不同的目的地。</p>
</li>
<li><p>负载均衡和故障转移：Flume支持使用将多个sink逻辑上分到一个sink组，sink组配合不同的SinkProcessor可以实现负载均衡和错误恢复的功能。</p>
</li>
<li><p>聚合：</p>
<p>这种模式是我们最常见的，也非常实用，日常web应用通常分布在上百个服务器，大者甚至上千个、上万个服务器。产生的日志，处理起来也非常麻烦。用flume的这种组合方式能很好的解决这一问题，每台服务器部署一个flume采集日志，传送到一个集中收集日志的flume，再由此flume上传到hdfs、hive、hbase等，进行日志分析。</p>
</li>
</ol>
</li>
<li><p>flume开发案例</p>
<ol>
<li><p>案例需求：</p>
<p>使用Flume-1监控文件变动，Flume-1将变动内容传递给Flume-2，Flume-2负责存储到HDFS。同时Flume-1将变动内容传递给Flume-3，Flume-3负责输出到Local FileSystem。</p>
<ul>
<li><p>配置文件编写：</p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">Flume-1</span><br><span class="line">#name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.positionFile = /home/hdfs/flume/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = f1</span><br><span class="line">a1.sources.r1.filegroups.f1 = /home/hdfs/test/data/log.log</span><br><span class="line"></span><br><span class="line">a1.sources.r1.selector.type = replicating</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = 192.168.157.10</span><br><span class="line">a1.sinks.k1.port = 6666</span><br><span class="line"></span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = 192.168.157.10</span><br><span class="line">a1.sinks.k2.port = 7777</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">a1.channels.c2.type = memory</span><br><span class="line">a1.channels.c2.capacity = 10000</span><br><span class="line">a1.channels.c2.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels = c2</span><br><span class="line">a1.sinks.k2.channel = c2</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a1 -f ~/confs/flume-01.conf -Dflume.root.logger=INFO,console</span><br><span class="line">#############################################################################################</span><br><span class="line">Flume-2</span><br><span class="line">#name</span><br><span class="line">a2.sources = r2</span><br><span class="line">a2.sinks = k2</span><br><span class="line">a2.channels = c2</span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a2.sources.r2.type = avro</span><br><span class="line">a2.sources.r2.bind = localhost</span><br><span class="line">a2.sources.r2.port = 6666</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a2.sinks.k2.type = hdfs</span><br><span class="line">a2.sinks.k2.hdfs.path =  hdfs://master:8020/flume/threeflume/%Y-%m-%d</span><br><span class="line">a2.sinks.k2.hdfs.filePrefix = log-</span><br><span class="line">a2.sinks.k2.hdfs.round = true</span><br><span class="line">a2.sinks.k2.hdfs.roundValue = 10</span><br><span class="line">a2.sinks.k2.hdfs.roundUnit = second</span><br><span class="line">a2.sinks.k2.hdfs.useLocalTimeStamp = true</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a2.channels.c2.type = memory</span><br><span class="line">a2.channels.c2.capacity = 10000</span><br><span class="line">a2.channels.c2.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a2.sources.r2.channels = c2</span><br><span class="line">a2.sinks.k2.channel = c2</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a2 -f ~/confs/flume-02.conf -Dflume.root.logger=INFO,console</span><br><span class="line">################################################################################################</span><br><span class="line">Flume-3</span><br><span class="line">#name</span><br><span class="line">a3.sources = r3</span><br><span class="line">a3.sinks = k3</span><br><span class="line">a3.channels = c3</span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a3.sources.r3.type = avro</span><br><span class="line">a3.sources.r3.bind = localhost</span><br><span class="line">a3.sources.r3.port = 7777</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a3.sinks.k3.type = file_roll   ##采集到的数据放到本地Stores events on the local filesystem. </span><br><span class="line">a3.sinks.k3.sink.directory = /opt/module/flume-1.9.0/jobs/fileroll</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a3.channels.c3.type = memory</span><br><span class="line">a3.channels.c3.capacity = 10000</span><br><span class="line">a3.channels.c3.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a3.sources.r3.channels = c3</span><br><span class="line">a3.sinks.k3.channel = c3</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a3 -f ~/confs/flume-03.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>输出的本地目录必须是已经存在的目录，如果该目录不存在，并不会创建新的目录。</p>
</li>
</ul>
</li>
<li><p>负载均衡和故障转移</p>
<ol>
<li><p>故障转移：案例分析</p>
<p>使用Flume1监控一个端口，其sink组中的sink分别对接Flume2和Flume3，采用FailoverSinkProcessor，实现故障转移的功能。</p>
<p><strong>使用jps -ml查看Flume进程。</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flume01-failover.conf</span><br><span class="line"></span><br><span class="line">#name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinkgroups = g1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.sinkgroups.g1.processor.type = failover</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k1 = 5</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k2 = 10</span><br><span class="line">a1.sinkgroups.g1.processor.maxpenalty = 10000</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = localhost</span><br><span class="line">a1.sinks.k1.port = 6666</span><br><span class="line"></span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = localhost</span><br><span class="line">a1.sinks.k2.port = 7777</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a1.sinkgroups.g1.sinks = k1 k2</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k2.channel = c1</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a1 -f ~/confs/flume01-failover.conf -Dflume.root.logger=INFO,console</span><br><span class="line">################################################################################################</span><br><span class="line">flume02-failover.conf</span><br><span class="line">#name</span><br><span class="line">a2.sources = r2</span><br><span class="line">a2.sinks = k2</span><br><span class="line">a2.channels = c2</span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a2.sources.r2.type = avro</span><br><span class="line">a2.sources.r2.bind = localhost</span><br><span class="line">a2.sources.r2.port = 6666</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a2.sinks.k2.type = logger</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a2.channels.c2.type = memory</span><br><span class="line">a2.channels.c2.capacity = 10000</span><br><span class="line">a2.channels.c2.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a2.sources.r2.channels = c2</span><br><span class="line">a2.sinks.k2.channel = c2</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a2 -f ~/confs/flume02-failover.conf -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">################################################################################################</span><br><span class="line"></span><br><span class="line">flume03-failover.conf</span><br><span class="line">#name</span><br><span class="line">a3.sources = r3</span><br><span class="line">a3.sinks = k3</span><br><span class="line">a3.channels = c3</span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a3.sources.r3.type = avro</span><br><span class="line">a3.sources.r3.bind = localhost</span><br><span class="line">a3.sources.r3.port = 7777</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a3.sinks.k3.type = logger</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a3.channels.c3.type = memory</span><br><span class="line">a3.channels.c3.capacity = 10000</span><br><span class="line">a3.channels.c3.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a3.sources.r3.channels = c3</span><br><span class="line">a3.sinks.k3.channel = c3</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a3 -f ~/confs/flume03-failover.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>负载均衡</p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">flume01-balance.conf</span><br><span class="line"></span><br><span class="line">#name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1.sinkgroups.g1.processor.type = load_balance</span><br><span class="line">a1.sinkgroups.g1.processor.backoff = true</span><br><span class="line">a1.sinkgroups.g1.processor.selector = random</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = localhost</span><br><span class="line">a1.sinks.k1.port = 6666</span><br><span class="line"></span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = localhost</span><br><span class="line">a1.sinks.k2.port = 7777</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k2.channel = c1</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a1 -f ~/confs/flume01-balance.conf -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">################################################################################################</span><br><span class="line"></span><br><span class="line">flume02-balance.conf</span><br><span class="line">#name</span><br><span class="line">a2.sources = r2</span><br><span class="line">a2.sinks = k2</span><br><span class="line">a2.channels = c2</span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a2.sources.r2.type = avro</span><br><span class="line">a2.sources.r2.bind = localhost</span><br><span class="line">a2.sources.r2.port = 6666</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a2.sinks.k2.type = logger</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a2.channels.c2.type = memory</span><br><span class="line">a2.channels.c2.capacity = 10000</span><br><span class="line">a2.channels.c2.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a2.sources.r2.channels = c2</span><br><span class="line">a2.sinks.k2.channel = c2</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a2 -f ~/confs/flume02-balance.conf -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">################################################################################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flume03-balance.conf</span><br><span class="line">#name</span><br><span class="line">a3.sources = r3</span><br><span class="line">a3.sinks = k3</span><br><span class="line">a3.channels = c3</span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a3.sources.r3.type = avro</span><br><span class="line">a3.sources.r3.bind = localhost</span><br><span class="line">a3.sources.r3.port = 7777</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a3.sinks.k3.type = logger</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a3.channels.c3.type = memory</span><br><span class="line">a3.channels.c3.capacity = 10000</span><br><span class="line">a3.channels.c3.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a3.sources.r3.channels = c3</span><br><span class="line">a3.sinks.k3.channel = c3</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a3 -f ~/confs/flume03-balance.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
<li><p>聚合</p>
<ol>
<li><p>案例需求：hadoop102上的Flume-1监控文件&#x2F;opt&#x2F;module&#x2F;group.log，hadoop103上的Flume-2监控某一个端口的数据流，Flume-1与Flume-2将数据发送给hadoop104上的Flume-3，Flume-3将最终数据打印到控制台。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flume01-aggre.conf</span><br><span class="line"></span><br><span class="line">#name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.positionFile = /home/hdfs/flume/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = f1</span><br><span class="line">a1.sources.r1.filegroups.f1 = /home/hdfs/test/data/log.log</span><br><span class="line"></span><br><span class="line">a1.sources.r1.selector.type = replicating</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = slave-02</span><br><span class="line">a1.sinks.k1.port = 6666</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a1 -f ~/confs/flume01-aggre.conf -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">###############################################################################################</span><br><span class="line"></span><br><span class="line">flume02-aggre.conf</span><br><span class="line"></span><br><span class="line">#name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = slave-02</span><br><span class="line">a1.sinks.k1.port = 6666</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a1 -f ~/confs/flume02-aggre.conf -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">################################################################################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flume03-aggre.conf</span><br><span class="line">#name</span><br><span class="line">a2.sources = r2</span><br><span class="line">a2.sinks = k2</span><br><span class="line">a2.channels = c2</span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a2.sources.r2.type = avro</span><br><span class="line">a2.sources.r2.bind = slave-02  ##此处不能写localhost</span><br><span class="line">a2.sources.r2.port = 6666</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a2.sinks.k2.type = logger</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a2.channels.c2.type = memory</span><br><span class="line">a2.channels.c2.capacity = 10000</span><br><span class="line">a2.channels.c2.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a2.sources.r2.channels = c2</span><br><span class="line">a2.sinks.k2.channel = c2</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a2 -f ~/confs/flume03-aggre.conf -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
<li><p>自定义interceptor</p>
<ol>
<li><p>需求：使用Flume采集服务器本地日志，需要按照日志类型的不同，将不同种类的日志发往不同的分析系统。</p>
<ul>
<li><p>添加maven依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flume<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flume-ng-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写interceptor</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span>  <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Event <span class="title function_">intercept</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] body = event.getBody();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body, StandardCharsets.UTF_8);</span><br><span class="line">        <span class="keyword">if</span> (s.contains(<span class="string">&quot;#&quot;</span>) || s.contains(<span class="string">&quot;*&quot;</span>)) &#123;</span><br><span class="line">            event.getHeaders().put(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;char&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s.contains(<span class="string">&quot;1&quot;</span>))&#123;</span><br><span class="line">            event.getHeaders().put(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;num&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            event.getHeaders().put(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;word&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> event;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Event&gt; <span class="title function_">intercept</span><span class="params">(List&lt;Event&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Event event : list) &#123;</span><br><span class="line">            intercept(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">build</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span>.Builder&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Interceptor <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyInterceptor</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(Context context)</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写flume配置文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flume01-interceptor.conf</span><br><span class="line"></span><br><span class="line">#name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1 k2 k3</span><br><span class="line">a1.channels = c1 c2 c3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line">a1.sources.r1.interceptors = i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type = com.suhe.interceptor.MyInterceptor$Builder</span><br><span class="line">a1.sources.r1.selector.type = multiplexing</span><br><span class="line">a1.sources.r1.selector.header = type</span><br><span class="line">a1.sources.r1.selector.mapping.char = c1</span><br><span class="line">a1.sources.r1.selector.mapping.num = c2</span><br><span class="line">a1.sources.r1.selector.mapping.word = c3</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = localhost</span><br><span class="line">a1.sinks.k1.port = 6666</span><br><span class="line"></span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = localhost</span><br><span class="line">a1.sinks.k2.port = 7777</span><br><span class="line"></span><br><span class="line">a1.sinks.k3.type = avro</span><br><span class="line">a1.sinks.k3.hostname = localhost</span><br><span class="line">a1.sinks.k3.port = 8888</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">a1.channels.c2.type = memory</span><br><span class="line">a1.channels.c2.capacity = 10000</span><br><span class="line">a1.channels.c2.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">a1.channels.c3.type = memory</span><br><span class="line">a1.channels.c3.capacity = 10000</span><br><span class="line">a1.channels.c3.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a1.sources.r1.channels = c1 c2 c3</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k2.channel = c2</span><br><span class="line">a1.sinks.k3.channel = c3</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a1 -f ~/confs/flume01-interceptor.conf -Dflume.root.logger=INFO,console</span><br><span class="line">#############################################################################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flume02-interceptor.conf</span><br><span class="line">#name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 6666</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a1 -f ~/confs/flume02-interceptor.conf -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############################################################################################</span><br><span class="line"></span><br><span class="line">flume03-interceptor.conf</span><br><span class="line">#name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 7777</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a1 -f ~/confs/flume03-interceptor.conf -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">#############################################################################################</span><br><span class="line"></span><br><span class="line">flume04-interceptor.conf</span><br><span class="line"></span><br><span class="line">#name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line">#sources</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 8888</span><br><span class="line"></span><br><span class="line">##sinks</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">##channels</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line">##bind</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line">flume-ng agent -c $FLUME_HOME/conf -n a1 -f ~/confs/flume04-interceptor.conf -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#name</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">#sources</span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.positionFile = /home/suxichuan/flume/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = f1</span><br><span class="line">a1.sources.r1.filegroups.f1 = /home/suxichuan/behavior/log</span><br><span class="line">#channels</span><br><span class="line">a1.channels.channel1.type = org.apache.flume.channel.kafka.KafkaChannel</span><br><span class="line">a1.channels.channel1.kafka.bootstrap.servers = hadoop102:9092,hadoop103:9092,hadoop104:9092</span><br><span class="line">a1.channels.channel1.kafka.topic = ods_behavor_log</span><br><span class="line">a1.channels.channel1.kafka.consumer.group.id = ods_behavor_group_1</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据采集</tag>
        <tag>flume</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle笔记</title>
    <url>/suxichuan/hudiBlog/2024/10/19/Oracle%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="PL-SQL-developer安装"><a href="#PL-SQL-developer安装" class="headerlink" title="PL&#x2F;SQL developer安装"></a>PL&#x2F;SQL developer安装</h2><p>1、安装PL&#x2F;SQL developer程序，安装目录不要出现中文。</p>
<p>2、配置客户端路径：点击PL&#x2F;SQL developer界面的Configure-&gt;Preferences-&gt;oracle配置的connect属性配置。，和</p>
<p>指定Oracle Home 路径：D:\BaiduNetdiskDownload\client\instantclient_12_1</p>
<p>指定OCI library路径：D:\BaiduNetdiskDownload\client\instantclient_12_1\oci.dll</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\AppData\Roaming\Typora\typora-user-images\image-20230714112548602.png"
                      alt="image-20230714112548602"
                ><figcaption>image-20230714112548602</figcaption></figure></p>
<p>3、在 ORACLE 的以下安装目录中找到 tnsnames.ora 文件，拷贝到本地电脑的 D盘根目录。打开 tnsnames.ora 文件编辑配置oracle所在的服务器IP地址，设置环境变量 TNS_ADMIN 为 D 盘根目录( tnsnames.ora 所在目录 )</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\71478\AppData\Roaming\Typora\typora-user-images\image-20230714113841909.png"
                      alt="image-20230714113841909"
                ><figcaption>image-20230714113841909</figcaption></figure></p>
<p>4、中文编码设置查看服务器端编码 </p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>:<span class="keyword">select</span> userenv(<span class="string">&#x27;language&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></div>

<p>我实际查到的结果为:AMERICAN_AMERICA.ZHS16GBK<br>5、配置环境变量，计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;新建，设置变量名:NLS_LANG,变量值:第 1 步查到的值，<br>AMERICAN_AMERICA.ZHS16GBK</p>
<h2 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h2><h4 id="number-数值类型"><a href="#number-数值类型" class="headerlink" title="number 数值类型"></a>number 数值类型</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">number（<span class="number">5</span>） 最大值<span class="number">99999</span> </span><br><span class="line">number(<span class="number">5</span>,<span class="number">2</span>) 最大值<span class="number">999.99</span></span><br></pre></td></tr></table></figure></div>

<h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">char 固定长度的字符类型，最多存储2000个字节</span><br><span class="line">varchar2 可变长度的字符类型，最多存储4000个字节</span><br><span class="line">long  大文本类型。最大可以存储2个G</span><br></pre></td></tr></table></figure></div>

<h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">sysdate 日期时间型，精确到秒</span><br><span class="line"><span class="type">timestamp</span> 精确到秒的小数点后<span class="number">9</span>位</span><br></pre></td></tr></table></figure></div>

<h4 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">clob</span> 存储字符,最大可以存<span class="number">4</span>个G</span><br><span class="line"><span class="type">blob</span> 存储图像、声音、视频等二进制数据,最多可以存<span class="number">4</span>个G</span><br></pre></td></tr></table></figure></div>

<h2 id="2、DDL操作"><a href="#2、DDL操作" class="headerlink" title="2、DDL操作"></a>2、DDL操作</h2><h4 id="用SQLPLUS连接Oracle的连接字符串"><a href="#用SQLPLUS连接Oracle的连接字符串" class="headerlink" title="用SQLPLUS连接Oracle的连接字符串"></a>用SQLPLUS连接Oracle的连接字符串</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">sqlplus <span class="keyword">system</span><span class="operator">/</span>local123<span class="variable">@192</span><span class="number">.168</span><span class="number">.157</span><span class="number">.129</span>:<span class="number">1521</span><span class="operator">/</span>orcl</span><br><span class="line">sqlplus    账户名<span class="operator">/</span>密码@所在主机:端口号</span><br><span class="line">sqlplus <span class="keyword">system</span><span class="operator">/</span>local123 <span class="keyword">as</span> sysdba</span><br></pre></td></tr></table></figure></div>

<h4 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space xxxx</span><br><span class="line">datafile <span class="string">&#x27;c:\xxxx.dbf&#x27;</span></span><br><span class="line">size <span class="number">100</span>m autoextend <span class="keyword">on</span> next <span class="number">10</span>m</span><br><span class="line">xxx表示表空间名</span><br><span class="line">datafile 表示数据储存的物理文件名</span><br><span class="line">size 用于设置表的初始大小</span><br><span class="line">autoextend <span class="keyword">on</span> 用于设置自动增长，如果存储量超过初始大小，则开始自动扩容</span><br><span class="line">next 用于设置扩容的空间大小</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space test;</span><br><span class="line">datafile <span class="string">&#x27;c:\test.dbf&#x27;</span></span><br><span class="line">size <span class="number">100</span>m autoextend <span class="keyword">on</span> next <span class="number">10</span>m</span><br></pre></td></tr></table></figure></div>

<h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> 用户名</span><br><span class="line">identified <span class="keyword">by</span> 密码</span><br><span class="line"><span class="keyword">default</span> tablespace 表空间名</span><br></pre></td></tr></table></figure></div>

<h4 id="用户赋予权限"><a href="#用户赋予权限" class="headerlink" title="用户赋予权限"></a>用户赋予权限</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant dba to 用户名  给xxx用户授予DBA权限</span><br></pre></td></tr></table></figure></div>

<h4 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名（</span><br><span class="line">字段名  字段类型[长度] [约束],</span><br><span class="line">....</span><br><span class="line">）</span><br><span class="line">例如</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users(</span><br><span class="line">userid number <span class="keyword">primary</span> key,</span><br><span class="line">name varchar2(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_owners(</span><br><span class="line">id number <span class="keyword">primary</span> key,</span><br><span class="line">name varchar2(<span class="number">30</span>),</span><br><span class="line">addressid number,</span><br><span class="line">housenumber varchar2(<span class="number">30</span>),</span><br><span class="line">watermeter varchar2(<span class="number">30</span>),</span><br><span class="line">adddate <span class="type">date</span>,</span><br><span class="line">ownertypeid number</span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_ownertype(id number  <span class="keyword">primary</span> key,name varchar2(<span class="number">30</span>));</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_pricetable(id number <span class="keyword">primary</span> key,price number(<span class="number">10</span>,<span class="number">2</span>),ownertypeid number,minnum number(<span class="number">10</span>,<span class="number">2</span>),maxnum number(<span class="number">10</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_area(id number <span class="keyword">primary</span> key,name varchar2(<span class="number">30</span>));</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_operator(id number prmary key,name varchar2(<span class="number">30</span>));</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_address(id number,name varchar2(<span class="number">30</span>),areaid number,operatorid number);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_account(id number,ownerid number,ownertypeid number,areaid number,<span class="keyword">year</span> <span class="type">char</span>(<span class="number">4</span>),<span class="keyword">month</span> <span class="type">char</span>(<span class="number">2</span>),num0 number,num1 number,usenum number,meteruserid number,meterdate <span class="type">date</span>,money number(<span class="number">10</span>,<span class="number">2</span>),isfee <span class="type">char</span>(<span class="number">1</span>),feedate <span class="type">date</span>,feeuserid number);</span><br></pre></td></tr></table></figure></div>

<h4 id="表的修改"><a href="#表的修改" class="headerlink" title="表的修改"></a>表的修改</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> tablename 查看表的详情</span><br><span class="line">#<span class="number">1</span>、增加字段语法</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tablename <span class="keyword">add</span> ( 字段名  字段类型 [<span class="keyword">default</span> 默认值 ],字段名  字段类型 [<span class="keyword">default</span> 默认值 ] );</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t_owners <span class="keyword">add</span> ( level number <span class="keyword">default</span> <span class="number">1</span>,email varchar2(<span class="number">255</span>) );</span><br><span class="line">#<span class="number">2</span>、修改字段语法</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tablename modify(字段名 字段类型[<span class="keyword">default</span> 默认值],字段名 字段类型[<span class="keyword">default</span> 默认值]);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t_owners modify(email varchar2(<span class="number">50</span>));</span><br><span class="line">#<span class="number">3</span>、修改字段名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tablename rename <span class="keyword">column</span> 原字段名 <span class="keyword">to</span> 新的字段名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t_owners rename <span class="keyword">column</span> email <span class="keyword">to</span> mail;</span><br><span class="line">#<span class="number">4</span>、删除字段名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tablename <span class="keyword">drop</span> <span class="keyword">column</span> 字段名；</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t_owners <span class="keyword">drop</span> tel</span><br><span class="line">#<span class="number">5</span>、删除多个字段名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tablename <span class="keyword">drop</span> (字段<span class="number">1</span>,字段<span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="清空表"><a href="#清空表" class="headerlink" title="清空表"></a>清空表</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> tablename; 删除表再重构表</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tablename <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>; 表结构还在 主键自增的序列依然存在</span><br></pre></td></tr></table></figure></div>

<h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> tablename;</span><br></pre></td></tr></table></figure></div>

<h2 id="3、DML操作"><a href="#3、DML操作" class="headerlink" title="3、DML操作"></a>3、DML操作</h2><h4 id="insert操作"><a href="#insert操作" class="headerlink" title="insert操作"></a>insert操作</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_owners(</span><br><span class="line">id number <span class="keyword">primary</span> key,</span><br><span class="line">name varchar2(<span class="number">30</span>),</span><br><span class="line">addressid number,</span><br><span class="line">housenumber varchar2(<span class="number">30</span>),</span><br><span class="line">watermeter varchar2(<span class="number">30</span>),</span><br><span class="line">adddate <span class="type">date</span>,</span><br><span class="line">ownertypeid number</span><br><span class="line">)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T_OWNERS <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;张三丰&#x27;</span>,<span class="number">1001</span>,<span class="string">&#x27;2-2&#x27;</span>,<span class="string">&#x27;5678&#x27;</span>,sysdate,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T_OWNERS <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;苏赫&#x27;</span>,<span class="number">1002</span>,<span class="string">&#x27;15-2&#x27;</span>,<span class="string">&#x27;8975&#x27;</span>,sysdate,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> T_OWNERS <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="string">&#x27;涂山红红&#x27;</span>,<span class="number">1002</span>,<span class="string">&#x27;6-2&#x27;</span>,<span class="string">&#x27;3456&#x27;</span>,sysdate,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">#<span class="keyword">create</span> <span class="keyword">table</span> t_ownertype(id number  <span class="keyword">primary</span> key,name varchar2(<span class="number">30</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_ownertype(id,name)<span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;master&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_ownertype(id,name)<span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;levelmaster&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_ownertype(id,name)<span class="keyword">values</span>(<span class="number">1003</span>,<span class="string">&#x27;supermaster&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_ownertype(id,name)<span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;居民&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_ownertype(id,name)<span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;物业&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_ownertype(id,name)<span class="keyword">values</span>(<span class="number">1003</span>,<span class="string">&#x27;来兵&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">#<span class="keyword">create</span> <span class="keyword">table</span> t_pricetable(id number <span class="keyword">primary</span> key,price number(<span class="number">10</span>,<span class="number">2</span>),ownertypeid number,minnum #number(<span class="number">10</span>,<span class="number">2</span>),maxnum number(<span class="number">10</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_pricetable <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">2.45</span>,<span class="number">1001</span>,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_pricetable <span class="keyword">values</span>(<span class="number">4</span>,<span class="number">3.45</span>,<span class="number">1001</span>,<span class="number">5</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_pricetable <span class="keyword">values</span>(<span class="number">5</span>,<span class="number">4.45</span>,<span class="number">1001</span>,<span class="number">10</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">commit</span></span><br><span class="line">#<span class="keyword">create</span> <span class="keyword">table</span> t_area(id number <span class="keyword">primary</span> key,name varchar2(<span class="number">30</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_area <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;East China&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_area <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;North China&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_area <span class="keyword">values</span>(<span class="number">1003</span>,<span class="string">&#x27;NorthEast&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_area <span class="keyword">values</span>(<span class="number">1004</span>,<span class="string">&#x27;SouthWest&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_area <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;双流区&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_area <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;温江区&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_area <span class="keyword">values</span>(<span class="number">1003</span>,<span class="string">&#x27;青羊区&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_area <span class="keyword">values</span>(<span class="number">1004</span>,<span class="string">&#x27;青白江区&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_area <span class="keyword">values</span>(<span class="number">1005</span>,<span class="string">&#x27;武侯区&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">#<span class="keyword">create</span> <span class="keyword">table</span> t_operator(id number <span class="keyword">primary</span> key,name varchar2(<span class="number">30</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_operator <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;mary&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_operator <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;sueh&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_operator <span class="keyword">values</span>(<span class="number">1003</span>,<span class="string">&#x27;lili&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_operator <span class="keyword">values</span>(<span class="number">1004</span>,<span class="string">&#x27;harry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_operator <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;小明&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_operator <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;小何&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_operator <span class="keyword">values</span>(<span class="number">1003</span>,<span class="string">&#x27;小苏&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_operator <span class="keyword">values</span>(<span class="number">1004</span>,<span class="string">&#x27;小红&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">#<span class="keyword">create</span> <span class="keyword">table</span> t_address(id number <span class="keyword">primary</span> key,name varchar2(<span class="number">30</span>),areaid number,operatorid number);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_address <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;quhouqu&#x27;</span>,<span class="number">1004</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_address <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;qingyangqu&#x27;</span>,<span class="number">1004</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_address <span class="keyword">values</span>(<span class="number">1003</span>,<span class="string">&#x27;shuangliuqu&#x27;</span>,<span class="number">1004</span>,<span class="number">1003</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_address <span class="keyword">values</span>(<span class="number">1004</span>,<span class="string">&#x27;wenjiangqu&#x27;</span>,<span class="number">1004</span>,<span class="number">1004</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_address <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;草金路&#x27;</span>,<span class="number">1004</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_address <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;尚楠湾&#x27;</span>,<span class="number">1004</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_address <span class="keyword">values</span>(<span class="number">1003</span>,<span class="string">&#x27;江安河大桥&#x27;</span>,<span class="number">1004</span>,<span class="number">1003</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_address <span class="keyword">values</span>(<span class="number">1004</span>,<span class="string">&#x27;崇教路&#x27;</span>,<span class="number">1004</span>,<span class="number">1004</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">create</span> <span class="keyword">table</span> t_account(id number,ownerid number,ownertypeid number,areaid number,<span class="keyword">year</span> <span class="type">char</span>(<span class="number">4</span>),<span class="keyword">month</span> #<span class="type">char</span>(<span class="number">2</span>),num0 number,num1 number,usenum number,meteruserid number,meterdate <span class="type">date</span>,money number(<span class="number">10</span>,<span class="number">2</span>),isfee #<span class="type">char</span>(<span class="number">1</span>),feedate <span class="type">date</span>,feeuserid number);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_account <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1001</span>,<span class="number">1001</span>,<span class="number">1001</span>,<span class="number">2023</span>,<span class="number">06</span>,<span class="number">43543</span>,<span class="number">46456</span>,<span class="number">3000</span>,<span class="number">1001</span>,sysdate,<span class="number">3232</span>,<span class="number">0</span>,sysdate,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_account <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">1002</span>,<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">2023</span>,<span class="number">06</span>,<span class="number">46456</span>,<span class="number">50020</span>,<span class="number">3564</span>,<span class="number">1002</span>,sysdate,<span class="number">3755</span>,<span class="number">0</span>,sysdate,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_account <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">1003</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">2023</span>,<span class="number">06</span>,<span class="number">82122</span>,<span class="number">92131</span>,<span class="number">10009</span>,<span class="number">1003</span>,sysdate,<span class="number">12000</span>,<span class="number">0</span>,sysdate,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_account <span class="keyword">values</span>(<span class="number">4</span>,<span class="number">1001</span>,<span class="number">1001</span>,<span class="number">1001</span>,<span class="number">2023</span>,<span class="number">07</span>,<span class="number">46456</span>,<span class="number">50000</span>,<span class="number">3544</span>,<span class="number">1004</span>,sysdate,<span class="number">3232</span>,<span class="number">0</span>,sysdate,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_account <span class="keyword">values</span>(<span class="number">5</span>,<span class="number">1004</span>,<span class="number">1001</span>,<span class="number">1004</span>,<span class="number">2023</span>,<span class="number">06</span>,<span class="number">60000</span>,<span class="number">80000</span>,<span class="number">20000</span>,<span class="number">1001</span>,sysdate,<span class="number">3232</span>,<span class="number">0</span>,sysdate,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_account <span class="keyword">values</span>(<span class="number">6</span>,<span class="number">1003</span>,<span class="number">1001</span>,<span class="number">1003</span>,<span class="number">2023</span>,<span class="number">07</span>,<span class="number">92131</span>,<span class="number">100000</span>,<span class="number">7869</span>,<span class="number">1001</span>,sysdate,<span class="number">3232</span>,<span class="number">0</span>,sysdate,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_account <span class="keyword">values</span>(<span class="number">7</span>,<span class="number">1001</span>,<span class="number">1001</span>,<span class="number">1001</span>,<span class="number">2023</span>,<span class="number">08</span>,<span class="number">50000</span>,<span class="number">70000</span>,<span class="number">20000</span>,<span class="number">1003</span>,sysdate,<span class="number">3232</span>,<span class="number">0</span>,sysdate,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_account <span class="keyword">values</span>(<span class="number">8</span>,<span class="number">1002</span>,<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">2023</span>,<span class="number">07</span>,<span class="number">50020</span>,<span class="number">70020</span>,<span class="number">20000</span>,<span class="number">1003</span>,sysdate,<span class="number">20000</span>,<span class="number">0</span>,sysdate,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">#关联查询</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  tad.id <span class="keyword">as</span> addressid,</span><br><span class="line">  tad.name <span class="keyword">as</span> addressname,</span><br><span class="line">  ta.name <span class="keyword">as</span> areaname,</span><br><span class="line">  top.name <span class="keyword">as</span> operatorname</span><br><span class="line"><span class="keyword">from</span> t_address tad,t_area ta,t_operator top</span><br><span class="line"><span class="keyword">where</span> tad.areaid<span class="operator">=</span>ta.id <span class="keyword">and</span> tad.operatorid<span class="operator">=</span>top.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	t1.addressid,</span><br><span class="line">   	t1.addressname,</span><br><span class="line">    t2.name <span class="keyword">as</span> operatoname,</span><br><span class="line">   	t1.areaname</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">   <span class="keyword">select</span> </span><br><span class="line">   		tad.id <span class="keyword">as</span> addressid,</span><br><span class="line">   		tad.name <span class="keyword">as</span> addressname,</span><br><span class="line">    	tad.operatorid <span class="keyword">as</span> operatorid,</span><br><span class="line">   		ta.name <span class="keyword">as</span> areaname</span><br><span class="line">   <span class="keyword">from</span> t_address tad <span class="keyword">left</span>  <span class="keyword">join</span> t_area ta <span class="keyword">on</span> tad.areaid<span class="operator">=</span>ta.id</span><br><span class="line">) t1 <span class="keyword">left</span> <span class="keyword">join</span> t_operator t2 <span class="keyword">on</span> t1.operatorid<span class="operator">=</span> t2.id;</span><br></pre></td></tr></table></figure></div>

<h4 id="update数据修改"><a href="#update数据修改" class="headerlink" title="update数据修改"></a>update数据修改</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="operator">=</span>新值，字段<span class="operator">=</span>新值 <span class="keyword">where</span> 条件;</span><br><span class="line"><span class="keyword">update</span> t_ownertype <span class="keyword">set</span> id<span class="operator">=</span><span class="number">1004</span>,name<span class="operator">=</span><span class="string">&#x27;level1master&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1001</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="delete删除数据"><a href="#delete删除数据" class="headerlink" title="delete删除数据"></a>delete删除数据</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">delete</span> <span class="keyword">from</span> tablename <span class="keyword">where</span> 条件</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_ownertype <span class="keyword">where</span> id <span class="operator">=</span><span class="number">1004</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_ownertype <span class="keyword">where</span> id <span class="operator">&gt;</span><span class="number">1001</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_ownertype <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意增删改查操作完成后记得commit提交事务</p>
</blockquote>
<h4 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h4><p>数据的导出</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">expdp(impdp) 用户名<span class="operator">/</span>密码@连接地址:端口<span class="operator">/</span>服务名 [schemas<span class="operator">|</span>owner]<span class="operator">=</span>用户名 [dumpfile<span class="operator">|</span>file]<span class="operator">=</span>file1.dmp logfile<span class="operator">=</span>file1.log directory<span class="operator">=</span>testdata1 remap_schema<span class="operator">=</span>test:test;</span><br><span class="line">exp:导出命令，导出时必写。</span><br><span class="line">imp:导入命令，导入时必写,每次操作，二者只能选择一个执行。</span><br><span class="line">username:导出数据的用户名，必写;</span><br><span class="line">password:导出数据的密码，必写;</span><br><span class="line">@:地址符号，必写;</span><br><span class="line">SERVICENAME:Oracle的服务名，必写;</span><br><span class="line"><span class="number">1521</span>:端口号，<span class="number">1521</span>是默认的可以不写,非默认要写;</span><br><span class="line">schemas：导出操作的用户名;</span><br><span class="line">dumpfile：导出的文件;</span><br><span class="line">logfile:导出的日志文件,可以不写；</span><br><span class="line">directory: 如果手工创建了转储文件和日志文件，通过本命令指定导出位置</span><br><span class="line">remap_schema<span class="operator">=</span>源数据库用户名:目标数据库用户名,二者不同时必写，相同可以省略;</span><br><span class="line"></span><br><span class="line">#例如</span><br><span class="line">exp <span class="keyword">system</span><span class="operator">/</span>local123 <span class="keyword">full</span><span class="operator">=</span>y 整个数据库全部导出</span><br><span class="line">exp <span class="keyword">system</span><span class="operator">/</span>local123 <span class="keyword">full</span><span class="operator">=</span>y [dumpfile<span class="operator">|</span>file]<span class="operator">=</span>a.dmp</span><br><span class="line">exp lili<span class="operator">/</span>lili123 file<span class="operator">=</span>lili.dmp owner<span class="operator">=</span>lili;</span><br><span class="line">按用户导入</span><br><span class="line">imp lili<span class="operator">/</span>lili123 file<span class="operator">=</span>lili.dmp fromuserlili;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">通过<span class="variable">@F</span>:\website\oraok\ot\<span class="number">11</span>g\ot_drop.sql 导入F盘下的\website\oraok\ot\<span class="number">11</span>g\目录下的ot_drop.sql文件</span><br></pre></td></tr></table></figure></div>

<h2 id="4、DML练习"><a href="#4、DML练习" class="headerlink" title="4、DML练习"></a>4、DML练习</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> tac.areaid,<span class="built_in">sum</span>(tac.money),ta.name <span class="keyword">from</span> t_account tac,t_area ta <span class="keyword">where</span> tac.areaid<span class="operator">=</span>ta.id <span class="keyword">group</span> <span class="keyword">by</span> tac.areaid,ta.name;</span><br></pre></td></tr></table></figure></div>

<h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_owners;</span><br><span class="line">#精确查询</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_owners <span class="keyword">where</span> watermeter<span class="operator">=</span><span class="number">5678</span>;</span><br><span class="line">#模糊查询</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_owners <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%张%&#x27;</span>;</span><br><span class="line">#<span class="keyword">and</span>的运算符 <span class="keyword">or</span>运算符</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_owners <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span> <span class="keyword">or</span> name <span class="keyword">like</span> <span class="string">&#x27;%山%&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_owners <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;_山__&#x27;</span> <span class="keyword">or</span> watermeter<span class="operator">&gt;</span><span class="number">5678</span>;</span><br><span class="line">#<span class="keyword">and</span>运算符 <span class="keyword">or</span>运算符混合使用</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_owners <span class="keyword">where</span> (name <span class="keyword">like</span> <span class="string">&#x27;%苏%&#x27;</span> <span class="keyword">or</span> name <span class="keyword">like</span> <span class="string">&#x27;%山%&#x27;</span> ) <span class="keyword">and</span> addressid <span class="operator">=</span><span class="number">1002</span>;</span><br><span class="line">#范围查询</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_account <span class="keyword">where</span> num0<span class="operator">&gt;=</span><span class="number">50000</span> <span class="keyword">and</span> num0<span class="operator">&lt;=</span><span class="number">70000</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_account <span class="keyword">where</span> num0 <span class="keyword">between</span> <span class="number">50000</span> <span class="keyword">and</span> <span class="number">70000</span>;</span><br><span class="line">#空值查询</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  <span class="keyword">from</span> t_account isfee <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line">#查询非空值</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_account isfee <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line">#去重查询</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> addressid <span class="keyword">from</span> t_owners ; </span><br><span class="line">#排序 默认升序<span class="keyword">asc</span> <span class="keyword">desc</span>降序</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_account <span class="keyword">order</span> <span class="keyword">by</span> usenum <span class="keyword">desc</span>;</span><br><span class="line">#基于伪列的查询rowid rowid是保存数据在磁盘上的物理地址</span><br><span class="line"><span class="keyword">select</span> rowid,t.<span class="operator">*</span> <span class="keyword">from</span> t_owners t;</span><br><span class="line">#可以通过rowid来指定查询的某条数据</span><br><span class="line"><span class="keyword">select</span> rowid,t.<span class="operator">*</span> <span class="keyword">from</span> t_owners t <span class="keyword">where</span> rowid<span class="operator">=</span><span class="string">&#x27;AAASNcAABAAAVJpAAD&#x27;</span>;</span><br><span class="line">#基于伪列的查询rownum rownum是基于查询出的结果集的序号</span><br><span class="line"><span class="keyword">select</span> rownum,t.<span class="operator">*</span> <span class="keyword">from</span> t_owners t;</span><br><span class="line">#聚合统计sum</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(usenum) <span class="keyword">from</span> t_account <span class="keyword">where</span> <span class="keyword">year</span><span class="operator">=</span><span class="string">&#x27;2023&#x27;</span>;</span><br><span class="line">#平均值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(usenum) <span class="keyword">from</span> t_account <span class="keyword">where</span> <span class="keyword">year</span><span class="operator">=</span><span class="string">&#x27;2023&#x27;</span>;</span><br><span class="line">#最小值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(usenum) <span class="keyword">from</span> t_account <span class="keyword">where</span> <span class="keyword">year</span><span class="operator">=</span><span class="string">&#x27;2023&#x27;</span>;</span><br><span class="line">#最大值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(usenum) <span class="keyword">from</span> t_account <span class="keyword">where</span> <span class="keyword">year</span><span class="operator">=</span><span class="string">&#x27;2023&#x27;</span>;</span><br><span class="line">#统计个数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> t_account <span class="keyword">where</span> <span class="keyword">year</span><span class="operator">=</span><span class="string">&#x27;2023&#x27;</span>;</span><br><span class="line">#分组查询</span><br><span class="line"><span class="keyword">select</span> areaid,<span class="built_in">sum</span>(usenum) <span class="keyword">from</span> t_account <span class="keyword">group</span> <span class="keyword">by</span> areaid;</span><br><span class="line">#分组后在指定条件的查询</span><br><span class="line"><span class="keyword">select</span> areaid,<span class="built_in">sum</span>(usenum) <span class="keyword">from</span> t_account <span class="keyword">group</span> <span class="keyword">by</span> areaid <span class="keyword">having</span> <span class="built_in">sum</span>(usenum)<span class="operator">&gt;</span><span class="number">20000</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">#多表内连接</span><br><span class="line"><span class="keyword">select</span> twn.<span class="operator">*</span>,ta.name addressname <span class="keyword">from</span> t_owners twn,t_address ta <span class="keyword">where</span> twn.addressid<span class="operator">=</span>ta.id;</span><br><span class="line"></span><br><span class="line">#查询显示业主编号，业主名称、地址和业主类型</span><br><span class="line"><span class="keyword">select</span> twn.id,twn.name,ta.name addressname,tt.name ownertype <span class="keyword">from</span> t_owners twn,t_ownertype tt,t_address ta <span class="keyword">where</span> twn.ownertypeid<span class="operator">=</span>tt.id <span class="keyword">and</span> twn.addressid<span class="operator">=</span>ta.id; </span><br><span class="line"></span><br><span class="line">#查询显示业主编号、业主名称、地址、所属区域、业主分类</span><br><span class="line"><span class="keyword">select</span> twn.id,twn.name,ta.name addressname,t1.name areaname,tt.name ownername <span class="keyword">from</span> t_owners twn, t_area t1,t_address ta,t_ownertype tt <span class="keyword">where</span> twn.addressid<span class="operator">=</span>ta.id <span class="keyword">and</span> twn.ownertypeid<span class="operator">=</span>tt.id <span class="keyword">and</span> ta.areaid<span class="operator">=</span>t1.id;</span><br><span class="line"></span><br><span class="line">#查询显示业主编号、业主名称、地址、所属区域、收费员、业主分类</span><br><span class="line"><span class="keyword">select</span> twn.id,twn.name,ta.name addressname,t1.name areaname,top.name operatorname,tt.name ownertypename <span class="keyword">from</span> t_owners twn,t_address ta,t_area t1,t_operator top,t_ownertype tt</span><br><span class="line"><span class="keyword">where</span> twn.addressid<span class="operator">=</span>ta.id <span class="keyword">and</span> twn.ownertypeid<span class="operator">=</span>tt.id <span class="keyword">and</span> ta.areaid<span class="operator">=</span>t1.id <span class="keyword">and</span> ta.operatorid<span class="operator">=</span>top.id;</span><br><span class="line"></span><br><span class="line">#查询业主的账务记录，显示业主编号、名称、年、月、金额。如果此业主没有账务记录也要列出姓名。</span><br><span class="line"><span class="keyword">select</span> twn.id,twn.name,tacc.year,tacc.month,tacc.money <span class="keyword">from</span> t_owners twn <span class="keyword">left</span> <span class="keyword">join</span> t_account tacc <span class="keyword">on</span> twn.id<span class="operator">=</span>tacc.ownerid; </span><br><span class="line"></span><br><span class="line">#左外连接</span><br><span class="line"><span class="keyword">select</span> twn.id,twn.name,tacc.year,tacc.month,tacc.money <span class="keyword">from</span> t_owners twn,t_account tacc <span class="keyword">where</span> twn.id<span class="operator">=</span>tacc.ownerid(<span class="operator">+</span>);</span><br><span class="line"></span><br><span class="line">#右外连接</span><br><span class="line"><span class="keyword">select</span> twn.id,twn.name,tacc.year,tacc.month,tacc.money <span class="keyword">from</span> t_owners twn,t_account tacc <span class="keyword">where</span> twn.id(<span class="operator">+</span>)<span class="operator">=</span>tacc.ownerid;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><ol>
<li><p>where子句中的子查询</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">#单行子查询</span><br><span class="line">#查询 <span class="number">2023</span> 年 <span class="number">6</span> 月用水量大于平均值的台账记录</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(usenum) <span class="keyword">from</span> t_account <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="number">6</span>;</span><br><span class="line"><span class="keyword">select</span> usenum <span class="keyword">from</span> t_account <span class="keyword">where</span> usenum<span class="operator">&gt;</span>(<span class="keyword">select</span> <span class="built_in">avg</span>(usenum) <span class="keyword">from</span> t_account <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="number">6</span>) <span class="keyword">and</span> <span class="keyword">month</span><span class="operator">=</span><span class="number">6</span>;</span><br><span class="line">#多行子查询</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1001</span>,<span class="number">1002</span>);</span><br><span class="line">#查询地址含有“草”的业主的信息</span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t_address <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%草%&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_owners <span class="keyword">where</span> addressid <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> t_address <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%江安河%&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#查询地址不含有“草”的业主的信息</span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t_address <span class="keyword">where</span> name <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">&#x27;%草%&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_owners <span class="keyword">where</span> addressid <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> t_address <span class="keyword">where</span> name <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">&#x27;%草%&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_onwers <span class="keyword">where</span> addressid <span class="keyword">not</span> <span class="keyword">in</span>(<span class="keyword">select</span> id <span class="keyword">from</span> t_address <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%草%&#x27;</span>);</span><br><span class="line">#</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>from子句中的子查询</p>
<p>from子查询为多行子查询</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">#查询显示业主编号，业主名称，业主类型名称，条件为业主类型为”居民”，使用子查询实现。</span><br><span class="line"><span class="keyword">select</span> id,name,ownertypename <span class="keyword">from</span> (<span class="keyword">select</span> twn.<span class="operator">*</span>,tt.name ownertypename  <span class="keyword">from</span> t_owners twn,t_ownertype tt  <span class="keyword">where</span> twn.ownertypeid<span class="operator">=</span>tt.id <span class="keyword">and</span> tt.name<span class="operator">=</span><span class="string">&#x27;居民&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>select 子句中的子查询</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">#列出业主信息，包括 ID，名称，所属地址。</span><br><span class="line"><span class="keyword">select</span> id,name,(<span class="keyword">select</span> name <span class="keyword">from</span> t_address <span class="keyword">where</span> id<span class="operator">=</span>addressid) addressname <span class="keyword">from</span> t_owners;</span><br><span class="line">#列出业主信息，包括 ID，名称，所属地址，所属区域</span><br><span class="line"><span class="keyword">select</span> id,name,</span><br><span class="line">(<span class="keyword">select</span> name <span class="keyword">from</span> t_address <span class="keyword">where</span> id<span class="operator">=</span>addressid) addressname,</span><br><span class="line">(<span class="keyword">select</span> (<span class="keyword">select</span> name <span class="keyword">from</span> t_area <span class="keyword">where</span> id<span class="operator">=</span>areaid) <span class="keyword">from</span> t_address <span class="keyword">where</span> id<span class="operator">=</span>addressid) areaname</span><br><span class="line"><span class="keyword">from</span> t_owners;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>分页查询</p>
<p>使用rownum伪列来完成分页查询的功能。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">#分页查询台账表 T_ACCOUNT，每页 <span class="number">10</span> 条记录</span><br><span class="line"><span class="keyword">select</span> rownum,t.<span class="operator">*</span> <span class="keyword">from</span> t_account t <span class="keyword">where</span> rownum<span class="operator">&lt;=</span><span class="number">5</span>; </span><br><span class="line">#查询<span class="number">5</span>到<span class="number">10</span>的数据</span><br><span class="line">#子查询里rownum小于较大值,外面rownum大于较小值</span><br><span class="line"><span class="keyword">select</span> rownum,t.<span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> rownum r,t.<span class="operator">*</span> <span class="keyword">from</span> t_account t <span class="keyword">where</span> rownum<span class="operator">&lt;=</span><span class="number">20</span>) t <span class="keyword">where</span> r<span class="operator">&lt;=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="5、函数"><a href="#5、函数" class="headerlink" title="5、函数"></a>5、函数</h2><h4 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ascii(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">from</span> dual;ASCII() 返回字符的十进制数;</span><br><span class="line"><span class="keyword">select</span> chr(<span class="number">97</span>) <span class="keyword">from</span> dual; chr() 返回十进制数的对应的字符;</span><br><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>) <span class="keyword">from</span> dual; 拼接两个字符串 <span class="operator">||</span> </span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;aa&#x27;</span> <span class="operator">||</span> <span class="string">&#x27;bb&#x27;</span> <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> initcap(<span class="string">&#x27;string&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> instr(<span class="string">&#x27;adbc&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">from</span> dual; 找出某个字符的位置</span><br><span class="line"><span class="keyword">select</span> instrb(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> length(<span class="string">&#x27;asdfgh&#x27;</span>) <span class="keyword">from</span> dual; 给出字符串的长度</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(<span class="string">&#x27;HELLO&#x27;</span>) <span class="keyword">from</span> dual;将字符转化成小写</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;apple&#x27;</span>) <span class="keyword">from</span> dual;将字符串转化成小写</span><br><span class="line">#去除指定的字符串</span><br><span class="line"><span class="keyword">select</span> ltrim(<span class="string">&#x27;##apple&#x27;</span>,<span class="string">&#x27;#&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> rtrim(<span class="string">&#x27;apple@@&#x27;</span>,<span class="string">&#x27;@&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="string">&#x27;p&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;apple&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> lpad(<span class="string">&#x27;apple&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;*&#x27;</span>) <span class="keyword">from</span> dual;在字符串c1的左边用字符串c2填充，直到长度为<span class="number">10</span>时为止</span><br><span class="line"><span class="keyword">select</span> rpad(<span class="string">&#x27;apple&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;#&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> replace(<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>) <span class="keyword">from</span> dual;替换指定的字符串。</span><br><span class="line"><span class="keyword">select</span> substr(<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>) <span class="keyword">from</span> dual;从第一个位置开始截取，截取两位</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">sysdate 返回系统当前时间</span><br><span class="line"><span class="keyword">select</span> sysdate <span class="keyword">from</span> dual;</span><br><span class="line">add_months 给系统返回的时间加一天</span><br><span class="line"><span class="keyword">select</span> add_months(sysdate,<span class="number">1</span>) <span class="keyword">from</span> dual;</span><br><span class="line">last_day 返回月份的最后一天</span><br><span class="line"><span class="keyword">select</span> last_day(add_months(sysdate,<span class="number">2</span>)) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> months_between(sysdate,to_date(<span class="string">&#x27;2023-04-30&#x27;</span>,<span class="string">&#x27;yyyy-MM-dd&#x27;</span>)) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">localtimestamp</span> <span class="keyword">from</span> dual;返回会话中的日期和时间 </span><br><span class="line"><span class="keyword">select</span> <span class="built_in">current_timestamp</span> <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> greatest(sysdate,add_months(sysdate,<span class="number">2</span>)) <span class="keyword">from</span> dual; 返回两个时间中最晚的。时间戳最大的。</span><br></pre></td></tr></table></figure></div>

<h4 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="built_in">abs</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual;绝对值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">ceil</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual;大于或等于 <span class="keyword">value</span> 的最小整数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cos</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual; 余弦</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cosh</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual;反余弦</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">exp</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual;e的<span class="keyword">value</span>次幂</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual;小于或等于 <span class="keyword">value</span> 的最大整数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">ln</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual;<span class="keyword">value</span> 的自然对数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">log</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual;<span class="keyword">value</span> 的以 <span class="number">10</span> 为底的对数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual;求模</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">power</span>(v,p) <span class="keyword">from</span> dual;v的p次幂</span><br><span class="line"><span class="keyword">select</span> round(v,p) <span class="keyword">from</span> dual;按 <span class="keyword">precision</span> 精度<span class="number">4</span>舍<span class="number">5</span>入</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sin</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual;<span class="keyword">value</span>的正弦</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sinh</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual;<span class="keyword">value</span>的反正弦</span><br><span class="line"><span class="keyword">select</span> sign(<span class="keyword">value</span>) <span class="keyword">from</span> dual;<span class="keyword">value</span> 为正返回 <span class="number">1</span>;为负返回<span class="number">-1</span>;为 <span class="number">0</span> 返回 <span class="number">0.</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">tan</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual;<span class="keyword">value</span>的正切</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">tanh</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual;<span class="keyword">value</span>的反正切</span><br><span class="line"><span class="keyword">select</span> vsize(<span class="keyword">value</span>) <span class="keyword">from</span> dual;返回<span class="keyword">value</span>在ORACLE的存储空间大小</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sqrt</span>(<span class="keyword">value</span>) <span class="keyword">from</span> dual;<span class="keyword">value</span>的平方根</span><br></pre></td></tr></table></figure></div>

<h2 id="6、表空间巡检"><a href="#6、表空间巡检" class="headerlink" title="6、表空间巡检"></a>6、表空间巡检</h2><h4 id="查询视图dba-data-files"><a href="#查询视图dba-data-files" class="headerlink" title="查询视图dba_data_files"></a>查询视图dba_data_files</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">file_name:表空间数据文件的位置</span><br><span class="line">file_id:数据文件的ID</span><br><span class="line">tablespace_name：表空间名称</span><br><span class="line">bytes:表空间大小 字节显示</span><br><span class="line">blocks:表示数据块数量</span><br><span class="line">status:表示当前文件是否可用</span><br><span class="line">relative_fno:相对文件号</span><br><span class="line">autoextensible:是否自动扩展</span><br><span class="line">maxbytes:如果扩展，最大扩展的大小</span><br><span class="line">maxblocks：如果扩展，最大的数据块数</span><br><span class="line">increment_by：最大增加的数据块数</span><br><span class="line">user_bytes:文件中实际有用的字节数</span><br><span class="line">user_blocks:文件中实际有用的数据块数</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> file_name,tablespace_name,bytes<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span> <span class="keyword">from</span> dba_data_files;</span><br><span class="line"><span class="keyword">select</span> file_name,tablespace_name,<span class="built_in">sum</span>(bytes)<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span> <span class="keyword">from</span> dba_data_files <span class="keyword">group</span> <span class="keyword">by</span> file_name,tablespace_name;</span><br><span class="line"></span><br><span class="line">#查看表空间总容量和剩余容量和使用量。</span><br><span class="line"><span class="keyword">select</span> df.tablespace_name,<span class="built_in">SUM</span>(df.bytes)<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span> total,<span class="built_in">SUM</span>(fs.bytes)<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span> <span class="keyword">free</span>,<span class="built_in">SUM</span>(df.bytes<span class="operator">-</span>fs.bytes)<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span> used <span class="keyword">from</span> dba_data_files df,dba_free_space fs</span><br><span class="line"><span class="keyword">where</span> df.tablespace_name <span class="operator">=</span> fs.tablespace_name</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> df.tablespace_name <span class="keyword">having</span> df.tablespace_name<span class="operator">=</span><span class="string">&#x27;WATERBOSS&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="查询视图dba-free-space"><a href="#查询视图dba-free-space" class="headerlink" title="查询视图dba_free_space"></a>查询视图dba_free_space</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">tablespace_name:表空间名称</span><br><span class="line">file_id：表空间ID</span><br><span class="line">block_id:开始块的ID</span><br><span class="line">bytes:表示空闲的字节数</span><br><span class="line">blocks:表示空闲的数据块数</span><br><span class="line">relative_fno:相对文件的id</span><br><span class="line">#查看表空间总容量和剩余容量和使用量。</span><br><span class="line"><span class="keyword">select</span> ds.tablespace_name,<span class="built_in">sum</span>(ds.bytes)<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span> total,<span class="built_in">sum</span>(fs.bytes)<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span> <span class="keyword">free</span>,<span class="built_in">sum</span>(ds.bytes)<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span><span class="operator">-</span><span class="built_in">sum</span>(fs.bytes)<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span> used <span class="keyword">from</span> dba_data_files ds,dba_free_space fs <span class="keyword">where</span> ds.tablespace_name<span class="operator">=</span>fs.tablespace_name <span class="keyword">group</span> <span class="keyword">by</span> ds.tablespace_name;</span><br></pre></td></tr></table></figure></div>

<h2 id="7、视图"><a href="#7、视图" class="headerlink" title="7、视图"></a>7、视图</h2><p>概念：视图是一种数据库对象，是从一个或者多个数据表或视图中导出的虚表，视图所对应的数据并不真正地存储在视图中，而是存储在所引用的数据表中，视图的结构和数据是对数据表进行查询的结果。</p>
<p>优点：</p>
<ul>
<li>简化数据操作：视图可以简化用户处理数据的方式。</li>
<li>着重于特定数据：不必要的数据或敏感数据可以不出现在视图中。</li>
<li>视图提供了一个简单而有效的安全机制，可以定制不同用户对数据的访问权限。</li>
<li>提供向后兼容性：视图使用户能够在表的架构更改时为表创建向后兼容接口。</li>
</ul>
<h4 id="创建和修改视图"><a href="#创建和修改视图" class="headerlink" title="创建和修改视图"></a>创建和修改视图</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> [<span class="keyword">or</span> replace] [force] <span class="keyword">view</span> view_name</span><br><span class="line"><span class="keyword">as</span> subquery</span><br><span class="line">[<span class="keyword">with</span> <span class="keyword">check</span> option]</span><br><span class="line">[<span class="keyword">with</span> read <span class="keyword">only</span>]</span><br><span class="line"></span><br><span class="line">[<span class="keyword">or</span> replace]:若已经存在该视图，oracle自动重构该视图</span><br><span class="line">[force]:不管基表是否存在，oracle都会自动创建该视图</span><br><span class="line">suquery:子查询</span><br><span class="line">[<span class="keyword">with</span> <span class="keyword">check</span> option]:插入和修改的数据行必须满足定义视图的约束</span><br><span class="line">[<span class="keyword">with</span> read <span class="keyword">only</span>]:该视图上不能进行任何 DML 操作。</span><br><span class="line"></span><br><span class="line">#<span class="keyword">create</span> <span class="keyword">view</span> dba_data_files_v1 <span class="keyword">as</span> <span class="keyword">select</span> file_name,tablespace_name, <span class="keyword">from</span> dba_data_files;</span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">or</span> replace] <span class="keyword">view</span> t_account_v1 <span class="keyword">as</span> <span class="keyword">select</span> id,ownerid,ownertypeid,areaid <span class="keyword">from</span> t_account;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_account_v1;</span><br><span class="line">#简单视图，可以进行增删改查记录</span><br><span class="line">#<span class="keyword">update</span> view_name <span class="keyword">set</span> <span class="keyword">column</span><span class="operator">=</span>新值 <span class="keyword">where</span> 条件</span><br><span class="line"><span class="keyword">update</span> t_account_v1 <span class="keyword">set</span> areaid<span class="operator">=</span><span class="number">1002</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_account_v1;</span><br></pre></td></tr></table></figure></div>

<p>视图其实是一个虚拟的表，它的数据其实来自于表。如果更改了视图的数据，表的数据也自然会变化，更改了<br>表的数据，视图也自然会变化。</p>
<h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> view_name;</span><br></pre></td></tr></table></figure></div>

<h4 id="带检查约束的视图"><a href="#带检查约束的视图" class="headerlink" title="带检查约束的视图"></a>带检查约束的视图</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> t_account_v2 </span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> id,ownerid,ownertypeid,areaid <span class="keyword">from</span> t_account <span class="keyword">where</span> areaid<span class="operator">=</span><span class="number">1001</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">check</span> option;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">update</span> t_account_v2 <span class="keyword">set</span> areaid<span class="operator">=</span><span class="number">1002</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">#会报错<span class="keyword">view</span> <span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION <span class="keyword">where</span><span class="operator">-</span>clause violation</span><br></pre></td></tr></table></figure></div>

<h4 id="只读视图的创建与使用"><a href="#只读视图的创建与使用" class="headerlink" title="只读视图的创建与使用"></a>只读视图的创建与使用</h4><p>指定 WITH READ ONLY 选项，这样创建的视图就是一个只读视图</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> t_account_v2</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> id,ownerid,ownertypeid,areaid <span class="keyword">from</span> t_account <span class="keyword">where</span> areaid<span class="operator">=</span><span class="number">1001</span></span><br><span class="line"><span class="keyword">with</span> read <span class="keyword">only</span>;</span><br><span class="line"><span class="keyword">update</span> t_account_v2 <span class="keyword">set</span> areaid<span class="operator">=</span><span class="number">1002</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">#修改只读视图出现：cannot perform a DML operation <span class="keyword">on</span> a read<span class="operator">-</span><span class="keyword">only</span> <span class="keyword">view</span></span><br></pre></td></tr></table></figure></div>

<h4 id="创建不存在基表的视图"><a href="#创建不存在基表的视图" class="headerlink" title="创建不存在基表的视图"></a>创建不存在基表的视图</h4><p>有的时候，创建视图时的表可能并不存在，但是以后可能会存在，此时需要创建这样的视图，需要添加 FORCE 选项</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace force <span class="keyword">view</span> t_temp_vi </span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_temp;</span><br></pre></td></tr></table></figure></div>

<h4 id="查询所有的视图"><a href="#查询所有的视图" class="headerlink" title="查询所有的视图"></a>查询所有的视图</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_views;</span><br></pre></td></tr></table></figure></div>

<h4 id="复杂视图的创建与使用"><a href="#复杂视图的创建与使用" class="headerlink" title="复杂视图的创建与使用"></a>复杂视图的创建与使用</h4><p>复杂视图，就是视图的 SQL 语句中，有聚合函数或多表关联查询。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">1</span>、多表关联查询的视图</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace force <span class="keyword">view</span> twn_tt_v1</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> twn.<span class="operator">*</span>,tt.name <span class="keyword">as</span> ownertypename <span class="keyword">from</span> t_owners twn,t_ownertype tt <span class="keyword">where</span> twn.ownertypeid<span class="operator">=</span>tt.id(<span class="operator">+</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">check</span> option;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> twn_tt_v1;</span><br><span class="line"><span class="keyword">update</span> twn_tt_v1 <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;suhe&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1002</span>;</span><br><span class="line">#可以修改主表的数据不可以修改关联表的数据</span><br><span class="line">#<span class="number">2</span>、分组聚合统计查询的视图</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_account;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace force <span class="keyword">view</span> month_per_num_2023</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>,<span class="keyword">month</span>,<span class="built_in">sum</span>(usenum) sumuse <span class="keyword">from</span> t_account <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">year</span>,<span class="keyword">month</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">year</span>,<span class="keyword">month</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> month_per_num_2023;</span><br></pre></td></tr></table></figure></div>

<h4 id="物化视图"><a href="#物化视图" class="headerlink" title="物化视图"></a>物化视图</h4><p>​	视图是一个虚拟表（也可以认为是一条语句），基于它创建时指定的查询语句返回的结果集。每次访问它都会导致这个查询语句被执行一次。为了避免每次访问都执行这个查询，可以将这个查询结果集存储到一个物化视图（也叫实体化视图）。物化视图与普通的视图相比的区别是物化视图是建立的副本，它类似于一张表，需要占用存储空间。而对一个物化视图查询的执行效率与查询一个表是一样的。</p>
<ul>
<li>创建物化视图语法</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> meterialized <span class="keyword">view</span> view_name</span><br><span class="line">[build immediate <span class="operator">|</span> build deferred]</span><br><span class="line">refresh [fast <span class="operator">|</span> complete <span class="operator">|</span> force]</span><br><span class="line">[</span><br><span class="line"> <span class="keyword">on</span> [<span class="keyword">commit</span> <span class="operator">|</span> demand]    <span class="operator">|</span> <span class="keyword">start</span> <span class="keyword">with</span> (start_time) next (next_time)</span><br><span class="line">]</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">subquery</span><br><span class="line"></span><br><span class="line">build immediate:是在创建物化视图的时候就生成数据。</span><br><span class="line">build dererred:则在创建时不生成数据，以后根据需要再生成数据。默认为 build immediate。</span><br><span class="line">refresh:指当基表发生了 DML 操作后，物化视图何时采用哪种方式和基表进行同步。[fast <span class="operator">|</span> complete<span class="operator">|</span>force] fast采用增量刷新，只刷新自上次刷新以后进行的修改。complete刷新对整个物化视图进行完全的刷新。force方式，则 Oracle 在刷新时会去判断是否可以进行快速刷新，如果可以则采用 fast 方式，否则采用 complete的方式，force 是默认的方式。</span><br><span class="line">刷新模式：<span class="keyword">on</span> <span class="keyword">commit</span>和<span class="keyword">on</span> demand两种， <span class="keyword">on</span> demand指需要手动刷新物化视图（默认）。<span class="keyword">on</span> <span class="keyword">commit</span>指在基表发生<span class="keyword">commit</span>操作时自动刷新.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>创建手动刷新的物化视图</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> meterialized <span class="keyword">view</span> mv_v1</span><br><span class="line">[build immediate</span><br><span class="line">refresh force <span class="keyword">on</span> demand]</span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> twn.<span class="operator">*</span>,ta.name <span class="keyword">as</span> addressname <span class="keyword">from</span> t_owners twn,t_address ta <span class="keyword">where</span> twn.addressid<span class="operator">=</span>ta.id(<span class="operator">+</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_owners <span class="keyword">VALUES</span> (<span class="number">1004</span>,<span class="string">&#x27;lili&#x27;</span>,<span class="number">1003</span>,<span class="string">&#x27;6-1&#x27;</span>,<span class="string">&#x27;7895&#x27;</span>,sysdate,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mv_v2;</span><br><span class="line">#物化视图中没有新插入的数据。</span><br><span class="line">#PL<span class="operator">/</span><span class="keyword">SQL</span>执行</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">DBMS_MVIEW.refresh(<span class="string">&#x27;mv_v2&#x27;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">#或者在命令行执行</span><br><span class="line"><span class="keyword">EXEC</span> DBMS_MVIEW.refresh(<span class="string">&#x27;mv_v2&#x27;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">#DBMS_MVIEW.refresh 实际上是系统内置的存储过程</span><br></pre></td></tr></table></figure></div>

<ul>
<li>创建自动刷新的物化视图</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> materialized <span class="keyword">view</span> mv_v3</span><br><span class="line">build immediate</span><br><span class="line">refresh force</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">commit</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> twn.<span class="operator">*</span>,ta.name <span class="keyword">as</span> addressname <span class="keyword">from</span> t_owners twn,t_address ta <span class="keyword">where</span> twn.addressid<span class="operator">=</span>ta.id(<span class="operator">+</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_owners <span class="keyword">VALUES</span> (<span class="number">1005</span>,<span class="string">&#x27;longlong&#x27;</span>,<span class="number">1002</span>,<span class="string">&#x27;6-2&#x27;</span>,<span class="string">&#x27;1234&#x27;</span>,sysdate,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mv_v3;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>创建时不生成数据的物化视图</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> materailized <span class="keyword">view</span> mv_v4</span><br><span class="line">build deferred</span><br><span class="line">refresh force <span class="keyword">on</span> <span class="keyword">commit</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> twn.<span class="operator">*</span>,ta.name <span class="keyword">as</span> addressname <span class="keyword">from</span> t_owners twn,t_address ta <span class="keyword">where</span> twn.addressid<span class="operator">=</span>ta.id(<span class="operator">+</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mv_v4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">DBMS_MVIEW.refresh(<span class="string">&#x27;mv_v4&#x27;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_owners <span class="keyword">VALUES</span> (<span class="number">1006</span>,<span class="string">&#x27;chuan&#x27;</span>,<span class="number">1001</span>,<span class="string">&#x27;7-2&#x27;</span>,<span class="string">&#x27;7534&#x27;</span>,sysdate,<span class="number">1003</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mv_v4;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>删除物化视图</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop materialized view view_name;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>创建增量刷新的物化视图</li>
</ul>
<p>如果创建增量刷新的物化视图，必须首先创建物化视图日志</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">#创建物化视图日志</span><br><span class="line"><span class="keyword">create</span> materialized <span class="keyword">view</span> log <span class="keyword">on</span> t_owners <span class="keyword">with</span> rowid;</span><br><span class="line"><span class="keyword">create</span> materialized <span class="keyword">view</span> log <span class="keyword">on</span> t_address <span class="keyword">with</span> rowid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> materialized <span class="keyword">view</span> mv_v5</span><br><span class="line">build immediate</span><br><span class="line">refresh fast</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">commit</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> twn.<span class="operator">*</span>,twn.rowid <span class="keyword">as</span> twnrowid,ta.rowid <span class="keyword">as</span> tarowid,ta.name <span class="keyword">as</span> addressname <span class="keyword">from</span> t_owners twn,t_address ta <span class="keyword">where</span> twn.addressid<span class="operator">=</span>ta.id(<span class="operator">+</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_owners <span class="keyword">VALUES</span> (<span class="number">1007</span>,<span class="string">&#x27;su&#x27;</span>,<span class="number">1002</span>,<span class="string">&#x27;8-2&#x27;</span>,<span class="string">&#x27;3455&#x27;</span>,sysdate,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">#创建增量刷新的物化视图，必须：</span><br><span class="line">#<span class="number">1</span>、创建物化视图中涉及表的物化视图日志。</span><br><span class="line">#<span class="number">2</span>、在查询语句中，必须包含所有表的rowid(以rowid方式建立物化视图日志)</span><br></pre></td></tr></table></figure></div>

<h2 id="8、序列"><a href="#8、序列" class="headerlink" title="8、序列"></a>8、序列</h2><p>序列是 ORACLE 提供的用于产生一系列唯一数字的数据库对象。</p>
<h4 id="创建序列语法"><a href="#创建序列语法" class="headerlink" title="创建序列语法"></a>创建序列语法</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> sequence sequence_name;</span><br></pre></td></tr></table></figure></div>

<p>通过序列的伪列来访问序列的值,NEXTVAL 返回序列的下一个值,CURRVAL 返回序列的当前值</p>
<blockquote>
<p>注意：我们在刚建立序列后，无法提取当前值，只有先提取下一个值时才能再次提取当前值。</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> sequence sequence_one;</span><br><span class="line"><span class="keyword">select</span> sequence_one.nextval <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> sequence_one.currval <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></div>

<h4 id="创建复杂序列"><a href="#创建复杂序列" class="headerlink" title="创建复杂序列"></a>创建复杂序列</h4><ul>
<li>语法：</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> sequence sequence_one</span><br><span class="line">[increment <span class="keyword">by</span> n] #递增的序列值是n 如果n是正数就递增,如果是负数就递减 默认是<span class="number">1</span></span><br><span class="line">[<span class="keyword">start</span> <span class="keyword">with</span> n] #开始的值,递增默认是 minvalue 递减是 maxvalue</span><br><span class="line">[&#123;maxvalue n<span class="operator">|</span>nomaxvalue&#125;] #最大值</span><br><span class="line">[&#123;minvalue n<span class="operator">|</span>nominvalue&#125;]#最小值</span><br><span class="line">[&#123;<span class="keyword">cycle</span> <span class="operator">|</span> nocycle&#125;] #循环</span><br><span class="line">[&#123;cache n <span class="operator">|</span> nocache&#125;] #分配并存入到内存中</span><br></pre></td></tr></table></figure></div>

<ul>
<li>创建有最大值的非循环序列</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> sequence seq_1</span><br><span class="line">increment <span class="keyword">by</span> <span class="number">20</span></span><br><span class="line">maxvalue <span class="number">100</span></span><br><span class="line">minvalue <span class="number">20</span></span><br><span class="line">nocycle;</span><br><span class="line"><span class="keyword">select</span> seq_1.nextval <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>有最大值的循环序列</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> sequence seq_2</span><br><span class="line">increment <span class="keyword">by</span> <span class="number">20</span></span><br><span class="line">maxvalue <span class="number">100</span></span><br><span class="line">minvalue <span class="number">20</span></span><br><span class="line"><span class="keyword">cycle</span></span><br><span class="line">cache <span class="number">4</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意：CACHE &lt;&#x3D; CEIL((MAXVALUE - MINVALUE) &#x2F; ABS(INCREMENT))<br>例如：cache &lt;&#x3D;ceil(100-20)&#x2F;abs(20)</p>
</blockquote>
<h4 id="修改和删除序列"><a href="#修改和删除序列" class="headerlink" title="修改和删除序列"></a>修改和删除序列</h4><p>修改序列：使用 ALTER SEQUENCE 语句修改序列，不能更改序列的 STARTWITH 参数</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> SEQUENCE 序列名称 MAXVALUE <span class="number">5000</span> <span class="keyword">CYCLE</span>;</span><br><span class="line"><span class="keyword">alter</span> sequence seq_1 maxvalue <span class="number">300</span> <span class="keyword">cycle</span> cache <span class="number">14</span>;</span><br></pre></td></tr></table></figure></div>

<p>删除序列</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> SEQUENCE 序列名称;</span><br><span class="line"><span class="keyword">drop</span> sequence seq_1;</span><br></pre></td></tr></table></figure></div>

<h2 id="9、同义词"><a href="#9、同义词" class="headerlink" title="9、同义词"></a>9、同义词</h2><p>​	同义词实质上是指定方案对象的一个别名。通过屏蔽对象的名称和所有者以及对分布式数据库的远程对象提供位置透明性，同义词可以提供一定程度的安全性。同时，同义词的易用性较好，降低了数据库用户的 SQL 语句复杂度。</p>
<p>​	同义词允许基对象重命名或者移动，这时，只需对同义词进行重定义，基于同义词的应用程序可以继续运行而无需修改。</p>
<p>​	同义词本身不涉及安全，当你赋予一个同义词对象权限时，你实质上是在给同义词的基对象赋予权限，同义词只是基对象的一个别名。</p>
<h4 id="创建与使用同义词"><a href="#创建与使用同义词" class="headerlink" title="创建与使用同义词"></a>创建与使用同义词</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> [public] SYNONYM synonym <span class="keyword">for</span> object</span><br><span class="line">synonym:创建的同义词的名称</span><br><span class="line">object:表示表，视图，序列等我们要创建同义词的对象的名称.创建共有的同义词，以另外的用户登陆，也可以使用公有同义词</span><br><span class="line"><span class="keyword">create</span> public SYNONYM twn <span class="keyword">for</span> t_owners;</span><br><span class="line">创建私有的同义词</span><br><span class="line"><span class="keyword">create</span> SYNONYM twn1 <span class="keyword">for</span> t_owners;</span><br></pre></td></tr></table></figure></div>

<h2 id="10、索引"><a href="#10、索引" class="headerlink" title="10、索引"></a>10、索引</h2><p>索引是用于加速数据存取的数据对象。合理的使用索引可以大大降低 i&#x2F;o 次数,从而提高数据访问性能。</p>
<p>索引是需要占据存储空间的，也可以理解为是一种特殊的数据。形式类似于下图的一棵“树”，而树的节点存储的就是每条记录的物理地址，也就是我们提到的伪列（ROWID）</p>
<h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index index_name <span class="keyword">on</span> table_name(column_name);#根据某张表的某列来创建索引。</span><br><span class="line"><span class="keyword">create</span> index t_owners_name <span class="keyword">on</span> t_owners(name);</span><br><span class="line"></span><br><span class="line">#索引性能测试</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> T_INDEXTEST (</span><br><span class="line">ID NUMBER,</span><br><span class="line">NAME VARCHAR2(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">FOR</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.1000000</span></span><br><span class="line">loop</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T_INDEXTEST <span class="keyword">VALUES</span>(i,<span class="string">&#x27;AA&#x27;</span><span class="operator">||</span>i);</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index t_indextest_name <span class="keyword">on</span> t_indextest(name);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_indextest <span class="keyword">where</span> id<span class="operator">=</span><span class="number">765432</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_indextest <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;AA765432&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><p>如果我们需要在某个表某个列创建索引，而这列的值是不会重复的。这是我们可以创建唯一索引。</p>
<p>语法</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index index_name <span class="keyword">on</span> table_name(column_name);</span><br></pre></td></tr></table></figure></div>

<h4 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index index_name <span class="keyword">on</span> table_name(column_name,column_name);</span><br></pre></td></tr></table></figure></div>

<h4 id="反向键索引"><a href="#反向键索引" class="headerlink" title="反向键索引"></a>反向键索引</h4><p>​	应用场景：当某个字段的值为连续增长的值，如果构建标准索引，会形成歪脖子树。这样会增加查询的层数，性能会下降。建立反向键索引，可以使索引的值变得不规则，从而使索引树能够均匀分布。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index 索引名称 <span class="keyword">on</span> 表名(列名) reverse;</span><br><span class="line"><span class="keyword">create</span> index t_indextest_name_reverse <span class="keyword">on</span> t_indextest(id) reverse;</span><br></pre></td></tr></table></figure></div>

<h4 id="位图索引"><a href="#位图索引" class="headerlink" title="位图索引"></a>位图索引</h4><ul>
<li>使用场景：位图索引适合创建在低基数列上</li>
<li>位图索引不直接存储 ROWID，而是存储字节位到 ROWID 的映射</li>
<li>优点：减少响应时间，节省空间占用</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> bitmap index index_name table_name(column_name);</span><br></pre></td></tr></table></figure></div>

<h2 id="11、PL-SQL"><a href="#11、PL-SQL" class="headerlink" title="11、PL&#x2F;SQL"></a>11、PL&#x2F;SQL</h2><p>PL&#x2F;SQL（Procedure Language&#x2F;SQL）是 Oracle 对 sql 语言的过程化扩展，指在 SQL 命令语言中增加了过程处理语句（如分支、循环等），使 SQL 语言具有过程处理能力。把 SQL 语言的数据操纵能力与过程语言的数据处理能力结合起来，使得 PLSQL 面向过程但比过程语言简单、高效、灵活和实用。</p>
<h4 id="基本语法结构"><a href="#基本语法结构" class="headerlink" title="基本语法结构"></a>基本语法结构</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">declare</span>  <span class="comment">--声明变量]</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">逻辑代码</span><br><span class="line">[exception <span class="comment">--异常处理]</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">声明变量的语法</span><br><span class="line">变量名 类型(长度)</span><br><span class="line">变量赋值语法</span><br><span class="line">变量名:<span class="operator">=</span>变量值</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_price number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_usenum number;</span><br><span class="line">v_usenum2 number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_money(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">v_price:<span class="operator">=</span><span class="number">2.45</span>;</span><br><span class="line">v_usenum:<span class="operator">=</span><span class="number">8012</span>;</span><br><span class="line">v_usenum2:<span class="operator">=</span>round(v_usenum<span class="operator">/</span><span class="number">1000</span>,<span class="number">2</span>);</span><br><span class="line">v_money:<span class="operator">=</span>round(v_price<span class="operator">*</span>v_usenum2,<span class="number">2</span>);</span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;单价：&#x27;</span><span class="operator">||</span>v_price<span class="operator">||</span><span class="string">&#x27;吨数:&#x27;</span><span class="operator">||</span>v_usenum2<span class="operator">||</span><span class="string">&#x27;金额：&#x27;</span><span class="operator">||</span>v_money);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<p>select into方式赋值</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">into</span> 变量名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意：结果必须是一条记录 ，有多条记录和没有记录都会报错</p>
</blockquote>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> usenum,num0,num1 <span class="keyword">from</span> t_account <span class="keyword">where</span> <span class="keyword">year</span><span class="operator">=</span><span class="number">2023</span> <span class="keyword">and</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_price number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_usenum number;</span><br><span class="line">v_usenum2 number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_num0 number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_num1 number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_money number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">v_price:<span class="operator">=</span><span class="number">2.45</span>;</span><br><span class="line"><span class="keyword">select</span> usenum,num0,num1 <span class="keyword">into</span> v_usenum,v_num0,v_num1 <span class="keyword">from</span> t_account <span class="keyword">where</span> <span class="keyword">year</span><span class="operator">=</span><span class="number">2023</span> <span class="keyword">and</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">v_usenum2:<span class="operator">=</span>round(v_usenum<span class="operator">/</span><span class="number">1000</span>,<span class="number">2</span>);</span><br><span class="line">v_money:<span class="operator">=</span>round(v_price<span class="operator">*</span>v_usenum2,<span class="number">2</span>);</span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;单价：&#x27;</span><span class="operator">||</span>v_price<span class="operator">||</span><span class="string">&#x27;吨数：&#x27;</span><span class="operator">||</span>v_usenum2<span class="operator">||</span><span class="string">&#x27;金额：&#x27;</span><span class="operator">||</span>v_money<span class="operator">||</span><span class="string">&#x27;上月字数：&#x27;</span><span class="operator">||</span>v_num0<span class="operator">||</span><span class="string">&#x27;本月字数&#x27;</span><span class="operator">||</span>v_num1);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h4><p>%TYPE 引用型  作用：引用某表某列的字段类型</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_price number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_usenum t_account.usenum<span class="operator">%</span>TYPE;</span><br><span class="line">v_num0 t_account.num0<span class="operator">%</span>TYPE;</span><br><span class="line">v_num1 t_account.num1<span class="operator">%</span>TYPE;</span><br><span class="line">v_usenum2 number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_money number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">v_price:<span class="operator">=</span><span class="number">2.55</span>;</span><br><span class="line"><span class="keyword">select</span> usenum,num0,num1 <span class="keyword">into</span> v_usenum,v_num0,v_num1 <span class="keyword">from</span> t_account <span class="keyword">where</span> <span class="keyword">year</span><span class="operator">=</span><span class="number">2023</span> <span class="keyword">and</span> id<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">v_usenum2:<span class="operator">=</span>round(v_usenum<span class="operator">/</span><span class="number">1000</span>,<span class="number">2</span>);</span><br><span class="line">v_money:<span class="operator">=</span>v_price<span class="operator">*</span>v_usenum2;</span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;单价：&#x27;</span><span class="operator">||</span>v_price<span class="operator">||</span><span class="string">&#x27;吨数：&#x27;</span><span class="operator">||</span>v_usenum2<span class="operator">||</span><span class="string">&#x27;金额：&#x27;</span><span class="operator">||</span>v_money<span class="operator">||</span><span class="string">&#x27;上月字数：&#x27;</span><span class="operator">||</span>v_num0<span class="operator">||</span><span class="string">&#x27;本月字数&#x27;</span><span class="operator">||</span>v_num1);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<p>%ROWTYPE 记录型 ，上例中的例子可以用下面的代码代替作用: 标识某个表的行记录类型</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_price number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_account t_account<span class="operator">%</span>ROWTYPE;</span><br><span class="line">v_usenum2 number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_money number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">v_price:<span class="operator">=</span><span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">into</span> v_account <span class="keyword">from</span> t_account <span class="keyword">where</span> <span class="keyword">year</span><span class="operator">=</span><span class="number">2023</span> <span class="keyword">and</span> id<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">v_usenum2:<span class="operator">=</span>round(v_account.usenum<span class="operator">/</span><span class="number">1000</span>,<span class="number">2</span>);</span><br><span class="line">v_money:<span class="operator">=</span>v_price<span class="operator">*</span>v_usenum2;</span><br><span class="line">DBMS_OUTPUT.put_line(<span class="string">&#x27;单价：&#x27;</span><span class="operator">||</span>v_price<span class="operator">||</span><span class="string">&#x27;吨数：&#x27;</span><span class="operator">||</span>v_usenum2<span class="operator">||</span><span class="string">&#x27;金额：&#x27;</span><span class="operator">||</span>v_money<span class="operator">||</span><span class="string">&#x27;上月字数：&#x27;</span><span class="operator">||</span>v_account.num0<span class="operator">||</span><span class="string">&#x27;本月字数&#x27;</span><span class="operator">||</span>v_account.num1);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>在运行程序时出现的错误叫做异常，发生异常后，语句将停止执行，控制权转移到 PL&#x2F;SQL 块的异常处理部分</p>
<p>异常有两种类型：</p>
<ul>
<li>预定义异常 - 当 PL&#x2F;SQL 程序违反 Oracle 规则或超越系统限制时隐式引发。</li>
<li>用户定义异常 - 用户可以在 PL&#x2F;SQL 块的声明部分定义异常，自定义的异常通过 RAISE 语句显式引发。</li>
</ul>
<p>oracle预定义的异常21个</p>
<table>
<thead>
<tr>
<th>系统异常</th>
<th>产生原因</th>
</tr>
</thead>
<tbody><tr>
<td>ACCESS_INTO_NULL</td>
<td>未定义对象</td>
</tr>
<tr>
<td>CASE_NOT_FOUND</td>
<td>CASE 中若未包含相应的 WHEN ，并且没有设置 ELSE 时</td>
</tr>
<tr>
<td>COLLECTION_IS_NULL</td>
<td>集合元素未初始化</td>
</tr>
<tr>
<td>CURSER_ALREADY_OPEN</td>
<td>游标已经打开</td>
</tr>
<tr>
<td>DUP_VAL_ON_INDEX</td>
<td>唯一索引对应的列上有重复值</td>
</tr>
<tr>
<td>INVALID_CURSOR</td>
<td>在不合法的游标上进行操作</td>
</tr>
<tr>
<td>INVALID_NUMBER</td>
<td>内置的SQL语句不能将字符转化为数字</td>
</tr>
<tr>
<td><em><strong>NO_DATA_FOUND</strong></em></td>
<td><em><strong>使用select into 没有行返回行</strong></em></td>
</tr>
<tr>
<td><em><strong>TOO_MANY_ROWS</strong></em></td>
<td><em><strong>使用select into 有多行数据返回</strong></em></td>
</tr>
<tr>
<td>ZERO_DIVIDE</td>
<td>除数为0</td>
</tr>
<tr>
<td>SUBSCRIPT_BEYOND_COUNT</td>
<td>元素下标超过嵌套表或 VARRAY 的最大值</td>
</tr>
<tr>
<td>SUBSCRIPT_OUTSIDE_LIMIT</td>
<td>使用嵌套表或 VARRAY 时，将下标指定为负数</td>
</tr>
<tr>
<td>VALUE_ERROR</td>
<td>赋值时，变量长度不足以容纳实际数据</td>
</tr>
<tr>
<td>LOGIN_DENIED</td>
<td>PL&#x2F;SQL 应用程序连接到 oracle 数据库时，提供了不正确的用户名或密码</td>
</tr>
<tr>
<td>NOT_LOGGED_ON</td>
<td>PL&#x2F;SQL 应用程序在没有连接 oralce 数据库的情况下访问数据</td>
</tr>
<tr>
<td>PROGRAM_ERROR</td>
<td>PL&#x2F;SQL 内部问题，可能需要重装数据字典＆ PL&#x2F;SQL 系统包</td>
</tr>
<tr>
<td>ROWTYPE_MISMATCH</td>
<td>宿主游标变量与 PL&#x2F;SQL 游标变量的返回类型不兼容</td>
</tr>
<tr>
<td>SELF_IS_NULL</td>
<td>使用对象类型时，在 NULL对象上调用对象方法</td>
</tr>
<tr>
<td>STORAGE_ERROR</td>
<td>运行 PL&#x2F;SQL 时，超出内存空间</td>
</tr>
<tr>
<td>SYS_INVALID_ID</td>
<td>无效的 ROWID 字符串</td>
</tr>
<tr>
<td>TIMEOUT_ON_RESOURCE</td>
<td>Oracle 在等待资源时超时</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>语法结构：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">exception</span><br><span class="line"><span class="keyword">when</span> 异常类型 <span class="keyword">then</span></span><br><span class="line">异常处理逻辑</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_price number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_usenum t_account.usenum<span class="operator">%</span>TYPE;</span><br><span class="line">v_usenum2 number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_money number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">v_price:<span class="operator">=</span><span class="number">3.55</span>;</span><br><span class="line"><span class="keyword">select</span> usenum <span class="keyword">into</span> v_usenum <span class="keyword">from</span> t_account <span class="keyword">where</span> <span class="keyword">year</span><span class="operator">=</span><span class="number">2023</span> <span class="keyword">and</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">v_usenum2:<span class="operator">=</span>round(v_usenum<span class="operator">/</span><span class="number">1000</span>,<span class="number">2</span>);</span><br><span class="line">v_money:<span class="operator">=</span>v_price<span class="operator">*</span>v_usenum2;</span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;单价：&#x27;</span><span class="operator">||</span>v_price<span class="operator">||</span><span class="string">&#x27;吨数:&#x27;</span><span class="operator">||</span>v_usenum2<span class="operator">||</span><span class="string">&#x27;金额：&#x27;</span><span class="operator">||</span>v_money);</span><br><span class="line">exception</span><br><span class="line"><span class="keyword">when</span> NO_DATA_FOUND <span class="keyword">then</span></span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;未找到数据，请核实&#x27;</span>);</span><br><span class="line"><span class="keyword">when</span> TOO_MANY_ROWS <span class="keyword">then</span></span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;查询条件有误，返回多条信息，请核实&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">#基本语法<span class="number">1</span></span><br><span class="line">if 条件 <span class="keyword">then</span></span><br><span class="line"> 业务逻辑</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line">#基本语法<span class="number">2</span></span><br><span class="line">if 条件 <span class="keyword">then</span></span><br><span class="line">业务逻辑</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">业务逻辑</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line">#基本语法<span class="number">3</span></span><br><span class="line">if 条件 <span class="keyword">then</span></span><br><span class="line">业务逻辑</span><br><span class="line">elseif 条件 <span class="keyword">then</span></span><br><span class="line">业务逻辑</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">业务逻辑</span><br><span class="line"><span class="keyword">end</span> if;</span><br></pre></td></tr></table></figure></div>

<p>需求：设置三个等级的水费 5 吨以下 2.45 元&#x2F;吨 5 吨到 10 吨部分 3.45 元&#x2F;吨 ，超过 10 吨部分 4.45 ，根据使用水费的量来计算阶梯水费。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_price1 number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_price2 number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_price3 number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_account t_account<span class="operator">%</span>ROWTYPE;</span><br><span class="line">v_usenum2 number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">v_money number(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">into</span> v_account <span class="keyword">from</span> t_account <span class="keyword">where</span> <span class="keyword">year</span><span class="operator">=</span><span class="number">2023</span> <span class="keyword">and</span> id<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">v_usenum2:<span class="operator">=</span>round(v_account.usenum<span class="operator">/</span><span class="number">1000</span>,<span class="number">2</span>);</span><br><span class="line">v_price1:<span class="operator">=</span><span class="number">2.45</span>;</span><br><span class="line">v_price2:<span class="operator">=</span><span class="number">3.45</span>;</span><br><span class="line">v_price3:<span class="operator">=</span><span class="number">4.45</span>;</span><br><span class="line">if v_usenum2<span class="operator">&lt;</span><span class="number">5</span> <span class="keyword">then</span></span><br><span class="line">v_money:<span class="operator">=</span>v_price1<span class="operator">*</span>v_usenum2;</span><br><span class="line">elsif <span class="number">5</span><span class="operator">&lt;</span>v_usenum2 <span class="keyword">and</span> v_usenum2<span class="operator">&lt;</span><span class="number">10</span> <span class="keyword">then</span></span><br><span class="line">v_money:<span class="operator">=</span>v_price1<span class="operator">*</span><span class="number">5</span><span class="operator">+</span>v_price2<span class="operator">*</span>(v_usenum2<span class="number">-5</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">v_money:<span class="operator">=</span>v_price1<span class="operator">*</span><span class="number">5</span><span class="operator">+</span>v_price2<span class="operator">*</span><span class="number">5</span><span class="operator">+</span>v_price3<span class="operator">*</span>(v_usenum2<span class="number">-5</span>);</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;吨数：&#x27;</span><span class="operator">||</span>v_usenum2<span class="operator">||</span><span class="string">&#x27;金额：&#x27;</span><span class="operator">||</span>v_money<span class="operator">||</span><span class="string">&#x27;上月字数：&#x27;</span><span class="operator">||</span>v_account.num0<span class="operator">||</span><span class="string">&#x27;本月字数&#x27;</span><span class="operator">||</span>v_account.num1);</span><br><span class="line">exception</span><br><span class="line"><span class="keyword">when</span> NO_DATA_FOUND <span class="keyword">then</span></span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;未找到数据，请核实&#x27;</span>);</span><br><span class="line"><span class="keyword">when</span> TOO_MANY_ROWS <span class="keyword">then</span></span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;有多行数据被查询&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><ol>
<li>无条件循环</li>
</ol>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">loop</span><br><span class="line">循环语句</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"></span><br><span class="line">#例子</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_num number;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">v_num:<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">loop</span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;v_num=&#x27;</span><span class="operator">||</span>v_num);</span><br><span class="line">v_num:<span class="operator">=</span>v_num<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">if v_num<span class="operator">=</span><span class="number">100</span> <span class="keyword">then</span></span><br><span class="line">exit;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">#循环部分可以改写成</span><br><span class="line">loop</span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;v_num=&#x27;</span><span class="operator">||</span>v_num);</span><br><span class="line">v_num:<span class="operator">=</span>v_num<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">exit <span class="keyword">when</span> v_num<span class="operator">&gt;</span><span class="number">100</span>;</span><br><span class="line"><span class="keyword">end</span> loop;</span><br></pre></td></tr></table></figure></div>

<pre><code> 2.条件循环
</code></pre>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">while 条件</span><br><span class="line">loop</span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"></span><br><span class="line">#范例：输出从<span class="number">1</span>开始的<span class="number">100</span>个数</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_num number;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">v_num:<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">while v_num<span class="operator">&lt;</span><span class="number">101</span></span><br><span class="line">loop</span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;v_num=&#x27;</span><span class="operator">||</span>v_num);</span><br><span class="line">v_num:<span class="operator">=</span>v_num<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<p>​	3.for循环</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">#基本语法</span><br><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 起始值..终值</span><br><span class="line">loop </span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">for</span> v_num <span class="keyword">in</span> <span class="number">0.</span><span class="number">.100</span></span><br><span class="line">loop</span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;v_num=&#x27;</span><span class="operator">||</span>v_num);</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h4><p>游标是系统为用户开设的一个数据缓冲区,存放 SQL 语句的执行结果。我们可以把游标理解为 PL&#x2F;SQL 中的结果集。</p>
<p>在声明区声明游标，语法如下：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cursor</span> 游标名称 <span class="keyword">is</span> <span class="keyword">SQL</span> 语句;</span><br></pre></td></tr></table></figure></div>

<p>使用游标语法</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> 游标名称</span><br><span class="line">loop</span><br><span class="line">	<span class="keyword">fetch</span> 游标名称 <span class="keyword">into</span> 变量;</span><br><span class="line">	exit <span class="keyword">when</span> 游标名称<span class="operator">%</span>notfound;</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">close</span> 游标名称;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">curr_jylsh varchar2(<span class="number">50</span>);</span><br><span class="line"><span class="keyword">cursor</span> lyjsh_cursor <span class="keyword">is</span> <span class="keyword">select</span> jylsh <span class="keyword">from</span> jylsh_table;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">open</span> lyjsh_cursor;</span><br><span class="line">	loop</span><br><span class="line">	<span class="keyword">fetch</span> lyjsh_cursor <span class="keyword">into</span> curr_jylsh;</span><br><span class="line">	exit <span class="keyword">when</span> lyjsh_cursor<span class="operator">%</span>notfound;</span><br><span class="line">	<span class="keyword">insert</span> <span class="keyword">into</span> t_sbf_sb_cxjm_sbbc_fail <span class="keyword">values</span>(curr_jylsh,sysdate,<span class="string">&#x27;ljh&#x27;</span>,<span class="string">&#x27;00&#x27;</span>);</span><br><span class="line">	<span class="keyword">commit</span>;</span><br><span class="line">	<span class="keyword">update</span> sbf_sb_cxjmhdxx <span class="keyword">set</span> sjclzt<span class="operator">=</span><span class="string">&#x27;00&#x27;</span>,xgrq<span class="operator">=</span>sysdate,xgr_dm<span class="operator">=</span><span class="string">&#x27;ljh&#x27;</span> <span class="keyword">where</span> cxjmhd_id <span class="keyword">in</span> (<span class="keyword">select</span> lymx_id <span class="keyword">from</span> sbf_sb_wyxx <span class="keyword">where</span> jylsh<span class="operator">=</span>curr_jylsh);</span><br><span class="line">	<span class="keyword">commit</span>;</span><br><span class="line">	<span class="keyword">delete</span> <span class="keyword">from</span> sbf_sb_cxjmwyxx e <span class="keyword">where</span> e.jylsh<span class="operator">=</span>curr_jylsh;</span><br><span class="line">	<span class="keyword">commit</span>;</span><br><span class="line">	<span class="keyword">delete</span> <span class="keyword">from</span> sbf_sb_cxjm_sbwyxx e <span class="keyword">where</span> e.jylsh<span class="operator">=</span>curr_jylsh;</span><br><span class="line">	<span class="keyword">commit</span>;</span><br><span class="line">	<span class="keyword">delete</span> <span class="keyword">from</span> sbf_sb_wyxx e <span class="keyword">where</span> e.jylsh<span class="operator">=</span>curr_jylsh;</span><br><span class="line">	<span class="keyword">commit</span>;</span><br><span class="line">	<span class="keyword">update</span> sbf_sb </span><br><span class="line">	<span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">close</span> lyjsh_cursor;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">	</span><br></pre></td></tr></table></figure></div>

<p>需求：打印业主类型为 1 的价格表</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> </span><br><span class="line">v_pricetable t_pricetable<span class="operator">%</span>ROWTYPE;</span><br><span class="line"><span class="keyword">cursor</span> cur_pricetable <span class="keyword">is</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_pricetable <span class="keyword">where</span> ownertypeid<span class="operator">=</span><span class="number">1001</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">open</span> cur_pricetable;</span><br><span class="line">	loop</span><br><span class="line">	<span class="keyword">fetch</span>  cur_pricetable <span class="keyword">into</span> v_pricetable;</span><br><span class="line">	exit <span class="keyword">when</span> cur_pricetable<span class="operator">%</span>notfound;</span><br><span class="line">	dbms_output.put_line( <span class="string">&#x27;价格:&#x27;</span><span class="operator">||</span>v_pricetable.price <span class="operator">||</span><span class="string">&#x27;吨位：&#x27;</span><span class="operator">||</span>v_pricetable.minnum<span class="operator">||</span><span class="string">&#x27;-&#x27;</span><span class="operator">||</span>v_pricetable.maxnum );</span><br><span class="line">	<span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">close</span> cur_pricetable;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<p>带参数的游标</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_pricetable t_pricetable<span class="operator">%</span>ROWTYPE;</span><br><span class="line"><span class="keyword">cursor</span> cur_pricetable(v_ownertypeid number) <span class="keyword">is</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_pricetable <span class="keyword">where</span> ownertypeid<span class="operator">=</span>v_ownertypeid;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">open</span> cur_pricetable(<span class="number">1001</span>);</span><br><span class="line">loop</span><br><span class="line">	<span class="keyword">fetch</span> cur_pricetable <span class="keyword">into</span> v_pricetable;</span><br><span class="line">	exit <span class="keyword">when</span> cur_pricetable<span class="operator">%</span>notfound;</span><br><span class="line">	dbms_output.put_line(<span class="string">&#x27;价格:&#x27;</span><span class="operator">||</span>v_pricetable.price <span class="operator">||</span><span class="string">&#x27;吨位：&#x27;</span><span class="operator">||</span>v_pricetable.minnum<span class="operator">||</span><span class="string">&#x27;-&#x27;</span><span class="operator">||</span>v_pricetable.maxnum );</span><br><span class="line"><span class="keyword">end</span> loop;	</span><br><span class="line"><span class="keyword">close</span> cur_pricetable;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<p>for 循环提取游标值</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="keyword">cursor</span> cur_pricetable(v_ownertypeid number) <span class="keyword">is</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_pricetable <span class="keyword">where</span> ownertypeid<span class="operator">=</span>v_ownertypeid;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">for</span> cur_pricetable <span class="keyword">in</span> cur_pricetable(<span class="number">1001</span>)</span><br><span class="line">loop</span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;价格:&#x27;</span><span class="operator">||</span>cur_pricetable.price <span class="operator">||</span><span class="string">&#x27;吨位：&#x27;</span><span class="operator">||</span>cur_pricetable.minnum<span class="operator">||</span><span class="string">&#x27;-&#x27;</span><span class="operator">||</span>cur_pricetable.maxnum );</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="12、存储函数"><a href="#12、存储函数" class="headerlink" title="12、存储函数"></a>12、存储函数</h2><p>存储函数又称为自定义函数。可以接收一个或多个参数，返回一个结果。在函数中我们可以使用 PL&#x2F;SQL 进行逻辑的处理。</p>
<h4 id="存储函数语法结构"><a href="#存储函数语法结构" class="headerlink" title="存储函数语法结构"></a>存储函数语法结构</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">function</span> 函数名称(参数名称 参数类型, 参数名称 参数类型, ...)</span><br><span class="line"><span class="keyword">return</span> 结果变量数据类型</span><br><span class="line"><span class="keyword">is</span> 变量声明部分;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">逻辑部分;</span><br><span class="line"><span class="keyword">RETURN</span> 结果变量;</span><br><span class="line">[exception 异常处理部分]</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span>  <span class="keyword">function</span> pingping(v_name varchar2,v_age number)</span><br><span class="line"><span class="keyword">return</span> varchar2</span><br><span class="line"><span class="keyword">is</span></span><br><span class="line">v_result varchar2(<span class="number">30</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">v_result:<span class="operator">=</span><span class="string">&#x27;姓名&#x27;</span><span class="operator">||</span>v_name<span class="operator">||</span><span class="string">&#x27;-年龄&#x27;</span><span class="operator">||</span>v_age;</span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;==&#x27;</span><span class="operator">||</span>v_result);</span><br><span class="line"><span class="keyword">return</span> v_result;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">select</span> pingping(<span class="string">&#x27;suhe&#x27;</span>,<span class="number">18</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></div>

<p>需求：查询业主 ID，业主名称，业主地址，业主地址使用刚才我们创建的函数来实现。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> ss(v_id number) <span class="keyword">return</span> varchar2</span><br><span class="line"><span class="keyword">is</span></span><br><span class="line">address_name varchar2(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">into</span> address_name <span class="keyword">from</span> t_address <span class="keyword">where</span> id<span class="operator">=</span>v_id;</span><br><span class="line"><span class="keyword">return</span> address_name;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> id,name,ss(addressid) <span class="keyword">from</span> t_owners;</span><br></pre></td></tr></table></figure></div>

<h2 id="13、存储过程"><a href="#13、存储过程" class="headerlink" title="13、存储过程"></a>13、存储过程</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>存储过程是被命名的 PL&#x2F;SQL 块，存储于数据库中，是数据库对象的一种。应用程序可以调用存储过程，执行相应的逻辑。</p>
<p>存储过程与存储函数都可以封装一定的业务逻辑并返回结果，存在区别如下：<br>1、存储函数中有返回值，且必须返回；而存储过程没有返回值，可以通过传出参数返回多个值。<br>2、存储函数可以在 select 语句中直接使用，而存储过程不能。过程多数是被应用程序所调用。<br>3、存储函数一般都是封装一个查询结果，而存储过程一般都封装一段事务代码。</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> 存储过程名字(参数<span class="number">1</span> 类型,参数<span class="number">2</span> 类型)</span><br><span class="line"><span class="keyword">is</span><span class="operator">|</span><span class="keyword">as</span></span><br><span class="line">变量申明;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">逻辑部分;</span><br><span class="line">[exception 异常处理部分]</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>参数只指定类型，不指定长度</p>
</blockquote>
<p>过程参数的三种模式：IN 传入参数（默认）,OUT 传出参数 ，主要用于返回程序运行结果,IN OUT 传入传出参数</p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>1、创建不带传出参数的存储过程：添加业主信息</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> sequence owner_sequence <span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> owners_add(v_name varchar2,v_addressid number,v_housenumber varchar2,v_watermeter varchar2,v_type varchar2)</span><br><span class="line"><span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_owners <span class="keyword">values</span>(owner_sequence.nextval,v_name,v_addressid,v_housenumber,v_watermeter,sysdate,v_type);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">call</span> owners_add(<span class="string">&#x27;赵伟&#x27;</span>,<span class="number">1001</span>,<span class="string">&#x27;999-3&#x27;</span>,<span class="string">&#x27;132-7&#x27;</span>,<span class="number">1002</span>);</span><br></pre></td></tr></table></figure></div>

<p>2、创建带传出参数的存储过程</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> owners_add_with_out(v_name varchar2,v_addressid number,v_housenumber varchar2,v_watermeter varchar2,v_type varchar2,v_id <span class="keyword">out</span> number)</span><br><span class="line"><span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> owner_sequence.nextval <span class="keyword">into</span> v_id <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_owners <span class="keyword">values</span>(v_id,v_name,v_addressid,v_housenumber,v_watermeter,sysdate,v_type);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">v_id number;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">owners_add_with_out(<span class="string">&#x27;王旺旺&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;922-3&#x27;</span>,<span class="string">&#x27;133-7&#x27;</span>,<span class="number">1</span>,v_id);</span><br><span class="line">DBMS_OUTPUT.put_line(<span class="string">&#x27;增加成功,ID:&#x27;</span><span class="operator">||</span>v_id);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="14、触发器"><a href="#14、触发器" class="headerlink" title="14、触发器"></a>14、触发器</h2><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>数据库触发器是一个与表相关联的、存储的 PL&#x2F;SQL 程序。每当一个特定的数据操作语句(Insert,update,delete)在指定的表上发出时，Oracle 自动地执行触发器中定义的语句序列。</p>
<p>触发器可用于</p>
<ul>
<li>数据确认</li>
<li>实施复杂的安全性检查</li>
<li>做审计，跟踪表上所做的数据操作等</li>
<li>数据的备份和同步</li>
</ul>
<p>触发器分类</p>
<ul>
<li>前置触发器（BEFORE）</li>
<li>后置触发器（AFTER）</li>
</ul>
<h4 id="触发器语法"><a href="#触发器语法" class="headerlink" title="触发器语法"></a>触发器语法</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> 触发器名字</span><br><span class="line">before<span class="operator">|</span>after</span><br><span class="line">[<span class="keyword">delete</span>][[<span class="keyword">or</span>] <span class="keyword">insert</span>][[<span class="keyword">or</span>]<span class="keyword">update</span> [<span class="keyword">of</span> 列名]]</span><br><span class="line"><span class="keyword">on</span> 表名</span><br><span class="line">[<span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> ] [<span class="keyword">when</span> [条件]]</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">变量申明;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">PLSQL块</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>作用是标注此触发器是行级触发器还是语句级触发器</p>
</blockquote>
<p>在触发器中触发语句与伪记录变量的值</p>
<table>
<thead>
<tr>
<th>触发语句</th>
<th>:old</th>
<th>:new</th>
</tr>
</thead>
<tbody><tr>
<td>insert</td>
<td>所有字段都是空的（null）</td>
<td>将要插入的数据</td>
</tr>
<tr>
<td>update</td>
<td>更新以前该行的值</td>
<td>更新后的值</td>
</tr>
<tr>
<td>delete</td>
<td>删除以前该行的值</td>
<td>所有字段都是空的（null）</td>
</tr>
</tbody></table>
<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p>1、前置触发器</p>
<p>需求：当用户输入本月累计表数后，自动计算出本月使用数 。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> tri_account_update</span><br><span class="line">before</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">of</span> num1</span><br><span class="line"><span class="keyword">on</span> t_account</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">:new.usenum:<span class="operator">=</span>:new.num1<span class="operator">-</span>:new.num0;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">create</span> <span class="keyword">table</span> t_account(id number,ownerid number,ownertypeid number,areaid number,<span class="keyword">year</span> <span class="type">char</span>(<span class="number">4</span>),<span class="keyword">month</span> #<span class="type">char</span>(<span class="number">2</span>),num0 number,num1 number,usenum number,meteruserid number,meterdate <span class="type">date</span>,money number(<span class="number">10</span>,<span class="number">2</span>),isfee #<span class="type">char</span>(<span class="number">1</span>),feedate <span class="type">date</span>,feeuserid number);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_account <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1001</span>,<span class="number">1001</span>,<span class="number">1001</span>,<span class="number">2023</span>,<span class="number">06</span>,<span class="number">43543</span>,<span class="number">46456</span>,<span class="number">3000</span>,<span class="number">1001</span>,sysdate,<span class="number">3232</span>,<span class="number">0</span>,sysdate,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t_account <span class="keyword">set</span> num1<span class="operator">=</span><span class="number">100000</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>

<p>2、后置触发器</p>
<p>需求：当用户修改了业主信息表的数据时记录修改前与修改后的值</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_owners_log</span><br><span class="line">(</span><br><span class="line">updatetime <span class="type">date</span>,</span><br><span class="line">ownerid number,</span><br><span class="line">oldname varchar2(<span class="number">30</span>),</span><br><span class="line">newname varchar2(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> tri_insert_owner</span><br><span class="line">after</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">of</span> name</span><br><span class="line"><span class="keyword">on</span> t_owners</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_owners_log <span class="keyword">values</span>(sysdate,:old.id,:old.name,:new.name);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t_owners <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;lililili&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1004</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_owners_log;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>关系型数据库</tag>
        <tag>表</tag>
        <tag>视图</tag>
        <tag>表空间</tag>
        <tag>序列</tag>
        <tag>函数</tag>
        <tag>索引</tag>
        <tag>触发器</tag>
        <tag>存储函数</tag>
        <tag>存储过程</tag>
      </tags>
  </entry>
</search>
